{"version":3,"sources":["enums.js","components/user/reducer.js","components/user/user-registration-validations.js","app-history.js","components/user/UserRegister.js","components/login/Login.js","components/utility/state-info.js","components/user/User.js","components/error/ErrorPage.js","components/post/post-service.js","components/comments/comment-services.js","components/UserDetailsPopup.js","components/likes/like-service.js","components/likes/LikesModal.js","components/utility/handle-dates.js","components/comments/Comment.js","components/CreatePost.js","components/post/Post.js","components/ErrorAlert.js","components/userfeed/UserFeed.js","components/navigation/NavBar.js","components/AppIndex.js","App.js","reportWebVitals.js","index.js"],"names":["RestMethod","reducer","state","action","type","preprocessed","status","payload","console","log","fieldErrors","hasError","preprocessingState","isSuccess","failureDetails","failureMessage","postprocessingState","successDetails","successMessage","message","resourceId","nameError","profileNameError","emailError","passwordError","DOBError","userSummaryError","details","defaultState","idError","detials","isValid","userDetails","method","returnValue","name","profileName","email","test","String","toLowerCase","password","dob","history","createBrowserHistory","withRouter","useState","id","userSummary","grantedAuthoritiesList","authority","user","setUser","changePerson","e","target","value","newUser","useReducer","dispatch","requestOptions","headers","body","JSON","stringify","style","height","className","Form","noValidate","onSubmit","preventDefault","fetch","then","response","json","data","push","error","Group","as","Col","md","controlId","Label","Control","placeholder","isInvalid","onChange","Feedback","Text","Date","toISOString","substr","rows","Button","variant","onClick","creds","username","usernameError","setCreds","changeState","useEffect","cookie","load","changeDefaults","jwt","get","forEach","key","expires","setDate","getDate","save","path","defaultUserState","User","defaultEditSettings","editTriggered","editOtherTriggered","editEmailTriggered","editPasswordTriggered","useContext","CurrentUserContext","setIsCurrentUserUpdated","isCurrentUserUpdated","jwtToken","loggedInUser","isLoggedInUser","setIsLoggedInUser","setIsBusy","editSettings","setEditSettings","useParams","Authorization","catch","parseInt","loadUser","currentUser","showAlert","alertMessage","loadUserFeed","pageNo","a","postsCUD","postId","postHeading","postBody","postForDispatch","owner","url","postedAtTime","moment","utc","modifiedAtTime","likeUnlikeCUD","post","likePost","likedAtTime","likedPost","commentsCUD","commentId","itemId","commentContent","commentForDispatch","commentedOn","parentComment","commentedAtTime","loadComments","likeUnlikeCommentCUD","comment","likeComment","likedComment","UserDetailsPopup","props","dateString","OverlayTrigger","placement","overlay","Popover","Title","Content","display","to","loadLikesOnPost","loadLikesOnComment","LikesModal","itemType","setShow","show","dataList","currentPageNo","noOfPages","likes","setLikes","handleClose","Modal","size","onHide","centered","Header","closeButton","Body","Card","ListGroup","map","like","Item","Footer","convertDateToReadableFormat","itemUTCString","itemUTC","currentUTC","days","Math","abs","diff","months","from","local","format","Comment","React","memo","parentCommentId","setParentComments","setNoOfRepliesInParent","noOfLikes","setNoOfLikes","noOfReplies","setNoOfReplies","commentLikedByCurrentUser","isCommentLiked","setIsCommentLiked","replies","setReplies","replyContent","setReplyContent","showLikesModal","setShowLikesModal","showGetRepliesLoad","setShowGetRepliesLoad","replyBarRef","useRef","reactionBarRef","updateCommentRef","commentContentRef","repliesDotRef","replyInputRef","updateInputRef","handleCommentCUD","useCallback","commentObj","postProp","trim","responseBody","newComment","comments","newDataList","filter","noOfComments","handleReplyCUD","replyObj","commentProp","undefined","current","click","alert","reply","handleLikeUnlikeComment","handleGetReplies","handleMovingPartsOnClick","focus","handleMovingPartsForKeys","maxWidth","border","bg","Subtitle","ref","cols","onKeyDown","Accordion","icon","faRegularThumbsUp","marginRight","cursor","opacity","color","faThumbsUp","Toggle","eventKey","faRegularCommentDots","marginLeft","faReply","faEdit","faWindowClose","Collapse","index2","CreatePost","setPosts","editorPost","setEditorPost","handlePostCU","posts","listPost","newPost","InputGroup","Prepend","FormControl","aria-label","aria-describedby","editor","ClassicEditor","onReady","setData","event","getData","onBlur","onFocus","myfuncs2","Set","Post","setComments","showPostModal","setShowPostModal","setCommentContent","setNoOfComments","commentsDotRef","handlePostDelete","iterPost","add","handleGetComments","handleLikeUnlikePost","postLikedByCurrentUser","borderBottom","Parser","borderTop","background","margin","faCommentDots","ErrorAlert","setTimeout","Alert","zIndex","dismissible","UserFeed","setAddPostButtonClicked","addPostButtonClicked","location","pagePostsRef","pagePosts","getDocHeight","D","document","max","scrollHeight","documentElement","offsetHeight","clientHeight","window","onbeforeunload","replace","addEventListener","handleScroll","removeEventListener","scrollY","innerHeight","length","index","NavBar","Navbar","position","fixed","expand","Brand","href","aria-controls","Nav","inline","DropdownButton","menuAlign","title","Dropdown","Divider","remove","AppIndex","exact","component","ErrorPage","render","userExists","Cookies","createContext","App","pathname","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.41c42450.chunk.js","sourcesContent":["export const RestMethod = {\r\n    POST: 'POST',\r\n    PUT: 'PUT',\r\n    DELETE: 'DELETE',\r\n    GET: 'GET'\r\n};","import { RestMethod } from '../../enums'\r\nexport function reducer(state, action)\r\n{\r\n  const { type, preprocessed, status, payload } = action\r\n\r\n  if (type === 'RESET') {\r\n    return payload\r\n  }\r\n\r\n  else {\r\n  \r\n    if (preprocessed === false) {\r\n\r\n      console.log('entering switch')\r\n      console.log('not preprocessed')\r\n      const fieldErrors = payload;\r\n      console.log(fieldErrors)\r\n      return {\r\n        ...state,\r\n        hasError: true,\r\n        preprocessingState: {\r\n          ...state.preprocessingState,\r\n          isSuccess: false,\r\n          failureDetails: {\r\n            ...state.failureDetails,\r\n            failureMessage: \"Please check the errors\",\r\n            fieldErrors: fieldErrors,\r\n          },\r\n        },\r\n      };\r\n    }\r\n    \r\n    else if (preprocessed) {\r\n      if (status === 200) {\r\n        return { ...state, hasError: false, preprocessingState: { ...state.preprocessingState, isSuccess: true }, postprocessingState: { ...state.postprocessingState, isSuccess: true, successDetails: { ...state.successDetails, successMessage: payload.message, resourceId: payload.resourceId } } }\r\n      }\r\n      else {\r\n    const fieldErrors = {\r\n      nameError: \"\",\r\n      profileNameError: \"\",\r\n      emailError: \"\",\r\n      passwordError: \"\",\r\n      DOBError: \"\",\r\n      userSummaryError: \"\",\r\n    };\r\n        return {\r\n          ...state,\r\n          hasError: true,\r\n          preprocessingState: {\r\n            ...state.preprocessingState,\r\n            failureDetails: {\r\n              ...state.preprocessingState.failureDetails,\r\n              fieldErrors: fieldErrors\r\n            },\r\n            isSuccess: true,\r\n          },\r\n          postprocessingState: {\r\n            ...state.postprocessingState,\r\n            isSuccess: false,\r\n            failureDetails: {\r\n              ...state.failureDetails,\r\n              failureMessage: payload.message,\r\n              details: payload.details,\r\n            },\r\n          },\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","import { RestMethod } from \"../../enums\";\r\n\r\nconst preprocessingState = {\r\n  isSuccess: false,\r\n  failureDetails: {\r\n    fieldErrors: {\r\n      idError: \"\",\r\n      nameError: \"\",\r\n      profileNameError: '',\r\n      emailError: \"\",\r\n      passwordError: \"\",\r\n      DOBError: \"\",\r\n      userSummaryError: \"\",\r\n    },\r\n  },\r\n};\r\n\r\nconst postprocessingState = {\r\n  isSuccess: false,\r\n  successDetails: {\r\n    successMessage: \"\",\r\n    resourceId: -1,\r\n  },\r\n  failureDetails: {\r\n    failureMessage: \"\",\r\n    detials: [],\r\n  },\r\n};\r\n\r\nexport let defaultState = {\r\n  hasError: false,\r\n  preprocessingState: preprocessingState,\r\n  postprocessingState: postprocessingState,\r\n};\r\n\r\nexport const isValid = (userDetails, fieldErrors, method) => {\r\n  let returnValue = true;\r\n\r\n\r\n  if (userDetails.name === \"\") {\r\n    fieldErrors.nameError = \"Field can't be empty\";\r\n    returnValue = false;\r\n  }\r\n\r\n    if (userDetails.profileName === \"\") {\r\n      fieldErrors.profileNameError = \"Field can't be empty\";\r\n      returnValue = false;\r\n  }\r\n  \r\n  if(method === RestMethod.POST){\r\n    if (userDetails.email === \"\") {\r\n    fieldErrors.emailError = \"Field can't be empty\";\r\n    returnValue = false;\r\n  } else {\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    if (!re.test(String(userDetails.email).toLowerCase())) {\r\n      fieldErrors.emailError = \"Incorrect email format\";\r\n      returnValue = false;\r\n    }\r\n    }\r\n  }\r\n  // Also need a regex for email\r\n\r\n  if(method === RestMethod.POST){\r\n    if (userDetails.password === \"\") {\r\n    fieldErrors.passwordError = \"Field can't be empty\";\r\n    returnValue = false;\r\n  } else {\r\n    const re = /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{6,16}$/;\r\n    if (!re.test(String(userDetails.password))) {\r\n      fieldErrors.passwordError = \"Incorrect password format\";\r\n      returnValue = false;\r\n    }\r\n    }\r\n  }\r\n  \r\n\r\n  if (userDetails.dob === \"\") {\r\n    fieldErrors.DOBError = \"Field can't be empty\";\r\n    returnValue = false;\r\n  }\r\n\r\n  return returnValue;\r\n};\r\n","import { createBrowserHistory } from \"history\";\r\n\r\nconst history = createBrowserHistory()\r\n\r\nexport default history\r\n","import React, { useState, useReducer } from \"react\";\r\nimport { withRouter } from 'react-router-dom'\r\nimport { reducer } from \"./reducer\";\r\nimport { RestMethod } from '../../enums.js';\r\nimport { isValid } from './user-registration-validations'\r\nimport { defaultState } from '../user/user-registration-validations'\r\nimport history from '../../app-history'\r\nimport { Col, Form, Button } from 'react-bootstrap';\r\n\r\nconst UserRegister = () => {\r\n  const defaultUser = {\r\n    id: null,\r\n    name: \"\",\r\n    email: \"\",\r\n    profileName: \"\",\r\n    password: \"\",\r\n    dob: \"\",\r\n    userSummary: \"\",\r\n    grantedAuthoritiesList: [\r\n      {\r\n        authority: \"ROLE_USER\",\r\n      },\r\n    ],\r\n  };\r\n\r\n\r\n  const [user, setUser] = useState(defaultUser);\r\n\r\n  const changePerson = (e) => {\r\n    const name = e.target.name;\r\n    const value = e.target.value;\r\n    const newUser = {\r\n      ...user,\r\n      [name]: value,\r\n    };\r\n    setUser(newUser);\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(reducer, defaultState);\r\n\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ ...user }),\r\n  };\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    requestOptions.method = RestMethod.POST;\r\n    const fieldErrors = {\r\n      nameError: \"\",\r\n      profileNameError: '',\r\n      emailError: \"\",\r\n      passwordError: \"\",\r\n      DOBError: \"\",\r\n      userSummaryError: ''\r\n    };\r\n            if (isValid(user, fieldErrors, RestMethod.POST)) {\r\n            fetch(\r\n              \"/api/v1/public/register\",\r\n              requestOptions\r\n            ).then((response) => {\r\n              response.json().then(body => {\r\n                if (response.status === 200) {\r\n\r\n                  const { data } = body\r\n                  console.log(data)\r\n\r\n                  history.push('/login')\r\n                }\r\n                else {\r\n                  const { error } = body\r\n                  dispatch(\r\n                    {\r\n                      type: RestMethod.POST,\r\n                      preprocessed: true,\r\n                      status: response.status,\r\n                      payload: error\r\n                    }\r\n                  )\r\n                }\r\n              });\r\n            });\r\n            } else {\r\n              dispatch({\r\n                type: RestMethod.POST,\r\n                preprocessed: false,\r\n                status: 422,\r\n                payload: fieldErrors,\r\n              });\r\n\r\n          }\r\n    \r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div style={{ height: \"60rem\" }}>\r\n        <div className=\"row h-100\">\r\n          <div className=\"col-md-4 mx-auto my-auto rounded shadow bg-white\">\r\n            <div className=\"col-md-4 mx-auto mt-3\">\r\n              <h3>Citizen Sane</h3>\r\n            </div>\r\n            <Form\r\n              noValidate\r\n              onSubmit={submitHandler}\r\n            >\r\n              <div className=\"col-md-12 my-4 mx-auto\">\r\n                <h5>Register</h5>\r\n              </div>\r\n\r\n              <Form.Group as={Col} md={12} controlId=\"formName\">\r\n                <Form.Label>Name</Form.Label>\r\n                <Form.Control\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  type=\"text\"\r\n                  placeholder=\"Enter your name\"\r\n                  value={user.name}\r\n                  isInvalid={\r\n                    state.hasError &&\r\n                    state.preprocessingState.failureDetails.fieldErrors\r\n                      .nameError !== \"\"\r\n                  }\r\n                  onChange={changePerson}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {\r\n                    state.preprocessingState.failureDetails.fieldErrors\r\n                      .nameError\r\n                  }\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n\r\n              <Form.Group as={Col} md={12} controlId=\"formEmail\">\r\n                <Form.Label>Email address</Form.Label>\r\n                <Form.Control\r\n                  id=\"email\"\r\n                  name=\"email\"\r\n                  type=\"email\"\r\n                  placeholder=\"Enter email\"\r\n                  value={user.email}\r\n                  onChange={changePerson}\r\n                  isInvalid={\r\n                    state.hasError &&\r\n                    state.preprocessingState.failureDetails.fieldErrors\r\n                      .emailError !== \"\"\r\n                  }\r\n                />\r\n                <Form.Text className=\"text-muted\">\r\n                  We'll never share your email with anyone else.\r\n                </Form.Text>\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {\r\n                    state.preprocessingState.failureDetails.fieldErrors\r\n                      .emailError\r\n                  }\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n\r\n              <Form.Group as={Col} md={12} controlId=\"formProfileName\">\r\n                <Form.Label>Profile Name</Form.Label>\r\n                <Form.Control\r\n                  id=\"profileName\"\r\n                  name=\"profileName\"\r\n                  type=\"text\"\r\n                  placeholder=\"Enter a name you would like to chose for your profile\"\r\n                  value={user.profileName}\r\n                  onChange={changePerson}\r\n                  isInvalid={\r\n                    state.hasError &&\r\n                    state.preprocessingState.failureDetails.fieldErrors\r\n                      .profileNameError !== \"\"\r\n                  }\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {\r\n                    state.preprocessingState.failureDetails.fieldErrors\r\n                      .profileNameError\r\n                  }\r\n                </Form.Control.Feedback>\r\n                {/* <Form.Control.Feedback>{state.preprocessingState.failureDetails.fieldErrors.emailError}</Form.Control.Feedback> */}\r\n              </Form.Group>\r\n\r\n              <Form.Group as={Col} md={12} controlId=\"formPassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control\r\n                  id=\"password\"\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  placeholder=\"Password\"\r\n                  value={user.password}\r\n                  onChange={changePerson}\r\n                  isInvalid={\r\n                    state.hasError &&\r\n                    state.preprocessingState.failureDetails.fieldErrors\r\n                      .passwordError !== \"\"\r\n                  }\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {\r\n                    state.preprocessingState.failureDetails.fieldErrors\r\n                      .passwordError\r\n                  }\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n\r\n              <Form.Group as={Col} md={12} controlId=\"formDOB\">\r\n                <Form.Label>Date of Birth</Form.Label>\r\n                <Form.Control\r\n                  id=\"dob\"\r\n                  name=\"dob\"\r\n                  type=\"date\"\r\n                  value={\r\n                    user.dob\r\n                      ? new Date(user.dob).toISOString().substr(0, 10)\r\n                      : \"\"\r\n                  }\r\n                  onChange={changePerson}\r\n                  isInvalid={\r\n                    state.hasError &&\r\n                    state.preprocessingState.failureDetails.fieldErrors\r\n                      .DOBError !== \"\"\r\n                  }\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {state.preprocessingState.failureDetails.fieldErrors.DOBError}\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n\r\n              <Form.Group as={Col} md={12} controlId=\"formUserSummary\">\r\n                <Form.Label>Something about yourself</Form.Label>\r\n                <Form.Control\r\n                  id=\"userSummary\"\r\n                  name=\"userSummary\"\r\n                  as=\"textarea\"\r\n                  rows={3}\r\n                  value={user.userSummary}\r\n                  onChange={changePerson}\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.Group as={Col} md={12}>\r\n                <Button variant=\"secondary\" className=\"my-3\" type=\"submit\">\r\n                  Submit\r\n                </Button>\r\n              </Form.Group>\r\n\r\n              <Form.Group as={Col} md={12}>\r\n                <button\r\n                  className=\"my-3 link-button\"\r\n                  type=\"submit\"\r\n                  // style={{\r\n                  //   background: \"none\",\r\n                  //   border: \"none\",\r\n                  //   margin: \"none\",\r\n                  //   textDecoration: \"underline\",\r\n                  //   color: \"dodgerblue\",\r\n                  // }}\r\n                  onClick={() => history.push(\"/login\")}\r\n                >\r\n                  Already registered? Click here to login\r\n                </button>\r\n              </Form.Group>\r\n\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {state.postprocessingState.failureDetails.failureMessage}\r\n              </Form.Control.Feedback>\r\n\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {state.postprocessingState.failureDetails.details}\r\n              </Form.Control.Feedback>\r\n            </Form>\r\n            <div className=\"col-md-8 mx-auto my-3 text-danger\">\r\n              {state.postprocessingState.failureDetails.failureMessage}\r\n              {state.postprocessingState.failureDetails.details}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n  \r\n};\r\n\r\nexport default withRouter(UserRegister)\r\n\r\n// const SuccessView = (props) => {\r\n//   const { successDetails } = props;\r\n//   const { successMessage, resourceId } = successDetails;\r\n//   return (\r\n//     <>\r\n//       <div>\r\n//         <h1>{successMessage}</h1>\r\n//         <h5>{resourceId}</h5>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport cookie from \"react-cookies\";\r\nimport { RestMethod } from \"../../enums.js\";\r\nimport  history  from '../../app-history'\r\nimport { Link, withRouter } from 'react-router-dom'\r\nimport { Form, Col, Button } from 'react-bootstrap'\r\n\r\nconst Login = () => {\r\n\r\n  const preprocessingState = {\r\n    isSuccess: true,\r\n    failureDetails: {\r\n      fieldErrors: {\r\n        usernameError: \"\",\r\n        passwordError: \"\",\r\n      }\r\n    }\r\n  };\r\n\r\n  const postprocessingState = {\r\n    isSuccess: true,\r\n    failureDetails: {\r\n      failureMessage: '',\r\n      details: []\r\n    }\r\n  }\r\n    const defaultState = {\r\n      hasError: false,\r\n      preprocessingState: preprocessingState,\r\n      postprocessingState: postprocessingState\r\n    }\r\n\r\n\r\n    const [creds, setCreds] = useState({\r\n        username: '',\r\n        password: ''\r\n    });\r\n\r\n  const [state, changeState] = useState(defaultState);\r\n\r\n  useEffect(() => {\r\n    const jwt = cookie.load('jwt')\r\n    if (jwt) {\r\n      history.push('/')\r\n    }\r\n  })\r\n  \r\n\r\n    const requestOptions = {\r\n        method: RestMethod.POST,\r\n        headers: { \"Content-Type\": \"application/json\", 'Authorization': '' },\r\n        body: JSON.stringify({ ...creds }),\r\n    };\r\n\r\n    const changeDefaults = (e) => {\r\n        const name = e.target.name\r\n        const value = e.target.value\r\n        setCreds({...creds, [name]: value})\r\n\r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      const fieldErrors = {\r\n        usernameError: '',\r\n        passwordError: ''\r\n        \r\n      }\r\n        if (isValid(creds, fieldErrors))  {\r\n            fetch(\r\n              \"/api/v1/public/login\",\r\n              requestOptions\r\n            ).then((response) => {\r\n                response.json().then(body => {\r\n                  if (response.status === 200) {\r\n                    const { data } = body\r\n                      const jwt = response.headers.get('Authorization')\r\n                      console.log(response)\r\n                      console.log(response.headers)\r\n                      response.headers.forEach((value, key)=>console.log('value is ',value,'key is ', key))\r\n                      console.log(jwt)\r\n                      let expires = new Date();\r\n                      expires.setDate(\r\n                        expires.getDate() + 7\r\n                      );\r\n\r\n                      cookie.save('jwt', jwt, { path: '/', expires: expires })\r\n                      cookie.save('current_user', data, { path: '/', expires: expires })\r\n                      \r\n                    \r\n                      history.push('/')\r\n                    }\r\n                    else {\r\n                    const { error } = body\r\n                        changeState({\r\n                          ...state,\r\n                          hasError: true,\r\n                          preprocessingState: {\r\n                            ...state.preprocessingState,\r\n                            failureDetails: {\r\n                              ...state.preprocessingState.failureDetails,\r\n                              fieldErrors: {\r\n                                usernameError: '',\r\n                                passwordError: ''\r\n                              }\r\n                            },\r\n                            isSuccess: true\r\n                            \r\n                          },\r\n                          postprocessingState: {\r\n                            ...state.postprocessingState,\r\n                            isSuccess: false,\r\n                            failureDetails: {\r\n                              failureMessage: error.message,\r\n                              details: error.details\r\n                            }\r\n                          }\r\n                        });\r\n                    }\r\n              });\r\n            });\r\n        } else {\r\n          changeState({\r\n            ...state,\r\n            hasError: true,\r\n            preprocessingState: {\r\n              ...state.preprocessingState,\r\n              isSuccess: false,\r\n              failureDetails: {\r\n                fieldErrors: fieldErrors,\r\n              },\r\n            },\r\n          });\r\n        }\r\n    }\r\n  \r\n\r\n  return (\r\n    \r\n      <div style={{ height: \"60rem\" }}>\r\n        <div className=\"row h-100\">\r\n          <div className=\"col-md-4 mx-auto my-auto rounded shadow bg-white\">\r\n            <div className=\"col-md-4 mx-auto mt-3\">\r\n              <h3>Citizen Sane</h3>\r\n            </div>\r\n            <Form\r\n              //className='my-75'\r\n              noValidate\r\n              //validated={state.hasError}\r\n              onSubmit={submitHandler}\r\n\r\n              //style={{  borderBlockColor: 'blue' }}\r\n            >\r\n              <div className=\"col-md-12 my-4 mx-auto\">\r\n                <h5>Login</h5>\r\n              </div>\r\n\r\n              <Form.Group as={Col} md={12} controlId=\"formUsername\">\r\n                <Form.Label>Username</Form.Label>\r\n                <Form.Control\r\n                  id=\"username\"\r\n                  name=\"username\"\r\n                  type=\"email\"\r\n                  placeholder=\"Enter the email id you logged in with\"\r\n                  value={creds.username}\r\n                  isInvalid={\r\n                    state.hasError &&\r\n                    state.preprocessingState.failureDetails.fieldErrors\r\n                      .usernameError !== \"\"\r\n                  }\r\n                  onChange={changeDefaults}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {\r\n                    state.preprocessingState.failureDetails.fieldErrors\r\n                      .usernameError\r\n                  }\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n\r\n              <Form.Group as={Col} md={12} controlId=\"formPassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control\r\n                  id=\"password\"\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  placeholder=\"Password\"\r\n                  value={creds.password}\r\n                  onChange={changeDefaults}\r\n                  isInvalid={\r\n                    state.hasError &&\r\n                    state.preprocessingState.failureDetails.fieldErrors\r\n                      .passwordError !== \"\"\r\n                  }\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {\r\n                    state.preprocessingState.failureDetails.fieldErrors\r\n                      .passwordError\r\n                  }\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n\r\n              <Form.Group as={Col} md={12}>\r\n                <Button variant='secondary' className=\"my-3\" type=\"submit\">\r\n                  Submit\r\n                </Button>\r\n              </Form.Group>\r\n\r\n              <Form.Group as={Col} md={12}>\r\n                <button\r\n                  className=\"my-3 link-button\"\r\n                  type=\"submit\"\r\n                  // style={{\r\n                  //   background: \"none\",\r\n                  //   border: \"none\",\r\n                  //   margin: \"none\",\r\n                  //   textDecoration: \"underline\",\r\n                  //   color: \"dodgerblue\",\r\n                  // }}\r\n                  onClick={() => history.push(\"/register\")}\r\n                >\r\n                  Register yourself\r\n                </button>\r\n              </Form.Group>\r\n            </Form>\r\n            <div className=\"col-md-8 mx-auto my-3 text-danger\">\r\n              {state.postprocessingState.failureDetails.failureMessage}\r\n              {state.postprocessingState.failureDetails.details}\r\n            </div>\r\n          </div>\r\n      </div>\r\n      </div>\r\n     \r\n    \r\n  );\r\n  \r\n};\r\n\r\nconst isValid = (creds, fieldErrors) => {\r\n\r\n  let returnValue = true\r\n\r\n\r\n    if (creds.username === \"\") {\r\n      fieldErrors.usernameError = \"Field can't be empty\";\r\n      returnValue = false;\r\n    } else {\r\n      const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n      if (!re.test(String(creds.username).toLowerCase())) {\r\n        fieldErrors.usernameError = \"Incorrect username format\";\r\n        returnValue = false;\r\n      }\r\n    }\r\n    // Also need a regex for username\r\n    if (creds.password === \"\") {\r\n      fieldErrors.passwordError = \"Field can't be empty\";\r\n      returnValue = false;\r\n    } else {\r\n      const re = /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{6,16}$/;\r\n      if (!re.test(String(creds.password))) {\r\n        fieldErrors.passwordError = \"Incorrect password format\";\r\n        returnValue = false;\r\n      }\r\n  }\r\n  \r\n    console.log('enetered is valid ', returnValue);\r\n\r\n    return returnValue\r\n}\r\n\r\nexport default withRouter(Login)\r\n","const preprocessingState = {\r\n  isSuccess: false,\r\n  failureDetails: {\r\n    fieldErrors: {\r\n      idError: \"\",\r\n      nameError: \"\",\r\n      emailError: \"\",\r\n      profileNameError: '',\r\n      passwordError: \"\",\r\n      DOBError: \"\",\r\n      userSummaryError: \"\",\r\n    },\r\n  },\r\n};\r\n\r\nconst postprocessingState = {\r\n  isSuccess: false,\r\n  successDetails: {\r\n    successMessage: \"\",\r\n    resourceId: -1,\r\n  },\r\n  failureDetails: {\r\n    failureMessage: \"\",\r\n    detials: [],\r\n  },\r\n};\r\n\r\nexport let defaultUserState = {\r\n  hasError: false,\r\n  preprocessingState: preprocessingState,\r\n  postprocessingState: postprocessingState,\r\n};\r\n\r\nexport let defaultPostState = {\r\n    hasError: false,\r\n    postprocessingState: postprocessingState\r\n}\r\n\r\nexport let defaultCommentState = {\r\n    hasError: false,\r\n    postprocessingState: postprocessingState\r\n}\r\n","import React, { useState, useReducer, useEffect, useContext } from \"react\";\r\nimport { useParams } from 'react-router-dom'\r\nimport { reducer } from \"./reducer\";\r\nimport cookie from \"react-cookies\";\r\nimport { RestMethod } from \"../../enums.js\";\r\nimport { isValid } from \"./user-registration-validations\";\r\nimport { defaultUserState as defaultState } from \"../utility/state-info\";\r\nimport { Form, Col, Button } from 'react-bootstrap';\r\nimport history from '../../app-history'\r\nimport { CurrentUserContext } from \"../../App\";\r\n\r\nconst User = () => {\r\n  const defaultUser = {\r\n    id: null,\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    profileName: \"\",\r\n    dob: \"\",\r\n    userSummary: \"\",\r\n    };\r\n    \r\n  const defaultEditSettings = {\r\n    editTriggered: false,\r\n    editOtherTriggered: false,\r\n    editEmailTriggered: false,\r\n    editPasswordTriggered: false\r\n  }\r\n\r\n  \r\n  const { isCurrentUserUpdated, setIsCurrentUserUpdated } = useContext(CurrentUserContext);\r\n\r\n  const jwtToken = cookie.load('jwt')\r\n  const loggedInUser = cookie.load(\"current_user\");\r\n\r\n    const [user, setUser] = useState(defaultUser);\r\n\r\n  const [isLoggedInUser, setIsLoggedInUser] = useState(false)\r\n\r\n  const [isBusy, setIsBusy] = useState(true)\r\n\r\n    const [editSettings, setEditSettings] = useState(defaultEditSettings);\r\n    \r\n    const { id } = useParams();\r\n\r\n      const loadUser =  () => {\r\n        const requestOptions = {\r\n          headers: {\r\n            Authorization: `Bearer ${jwtToken}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        };\r\n\r\n        fetch(\r\n          `/api/v1/profile/${id}`,\r\n          requestOptions\r\n        ).then(response => response.json().then(body => {\r\n          \r\n          if (response.status === 200) {\r\n            const { data } = body\r\n            setUser(data)\r\n            setIsBusy(false);\r\n            console.log(user)\r\n          }\r\n          else {\r\n\r\n            const { error } = body\r\n            console.log(error)\r\n            history.push('/error')\r\n          }\r\n          \r\n        })).catch(error => {\r\n\r\n          console.log(error)\r\n          history.push('/error')\r\n        })\r\n\r\n\r\n        if (loggedInUser.id === parseInt(id)) {\r\n          setIsLoggedInUser(true);\r\n        }\r\n      };\r\n  \r\n  useEffect(() => {\r\n    loadUser();\r\n  }, []);\r\n  \r\n\r\n  const changePerson = (e) => {\r\n    const name = e.target.name;\r\n    const value = e.target.value;\r\n    const newUser = {\r\n      ...user,\r\n      [name]: value,\r\n    };\r\n    setUser(newUser);\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(reducer, defaultState);\r\n\r\n\r\n  const updateHandler = (e) => {\r\n    e.preventDefault();\r\n        const requestOptions = {\r\n          method: RestMethod.PUT,\r\n          headers: { \"Content-Type\": \"application/json\", 'Authorization':  `Bearer ${jwtToken}`},\r\n          body: JSON.stringify({ ...user }),\r\n    };\r\n      \r\n\r\n    const fieldErrors = {\r\n      nameError: '',\r\n      // emailError: '',\r\n      profileNameError: '',\r\n      passwordError: '',\r\n      DOBError: '',\r\n      userSummaryError: ''\r\n    }\r\n\r\n    if (isValid(user, fieldErrors, RestMethod.PUT)) {\r\n      if (editSettings.editOtherTriggered === true) {\r\n        \r\n        fetch(`/api/v1/profile/{profileId}`, requestOptions).then((response) => {\r\n          response.json().then(body => {\r\n            if (response.status === 200) {\r\n              const { data } = body;\r\n              const currentUser = {\r\n                ...loggedInUser,\r\n                name: user.name,\r\n                userSummary: user.userSummary,\r\n                profileName: user.profileName\r\n              }\r\n\r\n              let expires = new Date();\r\n              expires.setDate(expires.getDate() + 7);\r\n\r\n              cookie.save(\"current_user\", currentUser, { path: \"/\", expires: expires })\r\n              setIsCurrentUserUpdated(true);\r\n            \r\n              dispatch({\r\n                type: RestMethod.PUT,\r\n                preprocessed: true,\r\n                status: response.status,\r\n                payload: data,\r\n              });\r\n              setEditSettings(defaultEditSettings)\r\n\r\n              history.push('/', { showAlert: true, alertMessage: 'Your profile has been updated successfully' });\r\n            } else {\r\n              const { error } = body\r\n              dispatch(\r\n                {\r\n                  type: RestMethod.PUT,\r\n                  preprocessed: true,\r\n                  status: response.status,\r\n                  payload: error\r\n                })\r\n              \r\n            }\r\n          });\r\n        }\r\n        );\r\n      }\r\n      else if (editSettings.editEmailTriggered === true) {\r\n        // Separate procedure for email change\r\n      }\r\n      else if (editSettings.editPasswordTriggered === true) {\r\n        // Separate procedure for password change\r\n      }\r\n\r\n    } else {\r\n      dispatch({\r\n        type: null,\r\n        preprocessed: false,\r\n        status: -1,\r\n        payload: fieldErrors,\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteHandler = (e) => {\r\n    e.preventDefault()\r\n    const requestOptions = {\r\n      method: RestMethod.DELETE,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${jwtToken}`,\r\n      },\r\n    };\r\n\r\n    fetch(\r\n      `/api/v1/profile/${id}`,\r\n      requestOptions\r\n    ).then((response) => {\r\n      response.json().then(body => {\r\n        if (response.status === 200) {\r\n          \r\n          const { data } = body\r\n          console.log(data)\r\n\r\n          history.push(\"/login\");\r\n\r\n        } else {\r\n          const { error } = body\r\n          dispatch({\r\n            type: RestMethod.DELETE,\r\n            preprocessed: true,\r\n            status: response.status,\r\n            payload: error,\r\n          });\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <div style={{ height: \"50rem\" }}>\r\n        <div className=\"row h-100\">\r\n          <div className=\"col-md-4 mx-auto my-auto rounded shadow bg-white\">\r\n            <Form noValidate onSubmit={updateHandler}>\r\n              <div className=\"col-md-12 my-4 mx-auto\">\r\n                <h5>User details</h5>\r\n              </div>\r\n\r\n              {editSettings.editTriggered === true &&\r\n              editSettings.editOtherTriggered === true ? (\r\n                <Form.Group as={Col} md={12} controlId=\"formName\">\r\n                  <Form.Label>Name</Form.Label>\r\n\r\n                  <Form.Control\r\n                    id=\"name\"\r\n                    name=\"name\"\r\n                    type=\"text\"\r\n                    placeholder=\"Enter your name\"\r\n                    value={user.name}\r\n                    isInvalid={\r\n                      state.hasError &&\r\n                      state.preprocessingState.failureDetails.fieldErrors\r\n                        .nameError !== \"\"\r\n                    }\r\n                    onChange={changePerson}\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {\r\n                      state.preprocessingState.failureDetails.fieldErrors\r\n                        .nameError\r\n                    }\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              ) : (\r\n                editSettings.editTriggered === false && (\r\n                  <div className=\"container\">\r\n                    <div className=\"row my-2\">\r\n                      <div className=\"col-md-6\">Name:</div>\r\n                      <div className=\"col-md-6\">{user.name}</div>\r\n                    </div>\r\n                  </div>\r\n                )\r\n              )}\r\n              {editSettings.editTriggered === true &&\r\n              editSettings.editEmailTriggered === true ? (\r\n                <Form.Group as={Col} md={12} controlId=\"formEmail\">\r\n                  <Form.Label className=\"h5\">Email address:</Form.Label>\r\n\r\n                  <Form.Control\r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                    type=\"email\"\r\n                    placeholder=\"Enter email\"\r\n                    value={user.email}\r\n                    onChange={changePerson}\r\n                    isInvalid={\r\n                      state.hasError &&\r\n                      state.preprocessingState.failureDetails.fieldErrors\r\n                        .emailError !== \"\"\r\n                    }\r\n                  />\r\n                  <Form.Text className=\"text-muted\">\r\n                    We'll never share your email with anyone else.\r\n                  </Form.Text>\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {\r\n                      state.preprocessingState.failureDetails.fieldErrors\r\n                        .emailError\r\n                    }\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              ) : (\r\n                editSettings.editTriggered === false && (\r\n                  <div className=\"container\">\r\n                    <div className=\"row my-2\">\r\n                      <div className=\"col-md-6\">Email:</div>\r\n                      <div className=\"col-md-6\">{user.email}</div>\r\n                    </div>\r\n                  </div>\r\n                )\r\n              )}\r\n\r\n              {editSettings.editTriggered === true &&\r\n                editSettings.editPasswordTriggered === true && (\r\n                  <Form.Group as={Col} md={12} controlId=\"formPassword\">\r\n                    <Form.Label className=\"h5\">New Password:</Form.Label>\r\n\r\n                    <Form.Control\r\n                      id=\"password\"\r\n                      name=\"password\"\r\n                      type=\"password\"\r\n                      value={user.password}\r\n                      onChange={changePerson}\r\n                      isInvalid={\r\n                        state.hasError &&\r\n                        state.preprocessingState.failureDetails.fieldErrors\r\n                          .passwordError !== \"\"\r\n                      }\r\n                    />\r\n\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {\r\n                        state.preprocessingState.failureDetails.fieldErrors\r\n                          .emailError\r\n                      }\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                )}\r\n\r\n              {editSettings.editTriggered === true &&\r\n              editSettings.editOtherTriggered === true ? (\r\n                <Form.Group as={Col} md={12} controlId=\"formProfileName\">\r\n                  <Form.Label>Profile Name</Form.Label>\r\n\r\n                  <Form.Control\r\n                    id=\"profileName\"\r\n                    name=\"profileName\"\r\n                    type=\"text\"\r\n                    placeholder=\"Enter a name you would like to chose for your profile\"\r\n                    value={user.profileName}\r\n                    onChange={changePerson}\r\n                    isInvalid={\r\n                      state.hasError &&\r\n                      state.preprocessingState.failureDetails.fieldErrors\r\n                        .profileNameError !== \"\"\r\n                    }\r\n                  />\r\n\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {\r\n                      state.preprocessingState.failureDetails.fieldErrors\r\n                        .profileNameError\r\n                    }\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              ) : (\r\n                editSettings.editTriggered === false && (\r\n                  <div className=\"container\">\r\n                    <div className=\"row my-2\">\r\n                      <div className=\"col-md-6\">Profile Name:</div>\r\n                      <div className=\"col-md-6\">{user.profileName}</div>\r\n                    </div>\r\n                  </div>\r\n                )\r\n              )}\r\n\r\n              {editSettings.editTriggered === true &&\r\n              editSettings.editOtherTriggered === true ? (\r\n                <Form.Group as={Col} md={12} controlId=\"formDOB\">\r\n                  <Form.Label>Date of Birth</Form.Label>\r\n\r\n                  <Form.Control\r\n                    id=\"dob\"\r\n                    name=\"dob\"\r\n                    type=\"date\"\r\n                    value={\r\n                      user.dob\r\n                        ? new Date(user.dob).toISOString().substr(0, 10)\r\n                        : \"\"\r\n                    }\r\n                    onChange={changePerson}\r\n                    isInvalid={\r\n                      state.hasError &&\r\n                      state.preprocessingState.failureDetails.fieldErrors\r\n                        .DOBError !== \"\"\r\n                    }\r\n                  />\r\n\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {state.hasError &&\r\n                      state.preprocessingState.failureDetails.fieldErrors\r\n                        .DOBError}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              ) : (\r\n                editSettings.editTriggered === false && (\r\n                  <div className=\"container\">\r\n                    <div className=\"row my-2\">\r\n                      <div className=\"col-md-6\">Date of Birth:</div>\r\n                      <div className=\"col-md-6\">{user.dob}</div>\r\n                    </div>\r\n                  </div>\r\n                )\r\n              )}\r\n\r\n              {editSettings.editTriggered === true &&\r\n              editSettings.editOtherTriggered === true ? (\r\n                <Form.Group as={Col} md={12} controlId=\"formUserSummary\">\r\n                  <Form.Label>Something about yourself</Form.Label>\r\n\r\n                  <Form.Control\r\n                    id=\"userSummary\"\r\n                    name=\"userSummary\"\r\n                    as=\"textarea\"\r\n                    rows={3}\r\n                    value={user.userSummary}\r\n                    onChange={changePerson}\r\n                  />\r\n                </Form.Group>\r\n              ) : (\r\n                editSettings.editTriggered === false && (\r\n                  <div className=\"container\">\r\n                    <div className=\"row my-2\">\r\n                      <div className=\"col-md-6\">Profile Summary:</div>\r\n                      <div className=\"col-md-6\">{user.userSummary}</div>\r\n                    </div>\r\n                  </div>\r\n                )\r\n              )}\r\n\r\n              {editSettings.editTriggered === true ? (\r\n                <Form.Group as={Col} md={12}>\r\n                  <Button className=\"my-3 mr-2\" type=\"submit\">\r\n                    Update\r\n                  </Button>\r\n                  <Button className=\"my-3 ml-2\" type=\"clear\">\r\n                    Clear\r\n                  </Button>\r\n                </Form.Group>\r\n              ) : isLoggedInUser ? (\r\n                <Form.Group as={Col} md={12}>\r\n                  <div className=\"row\">\r\n                    <button\r\n                      className=\"col-md col-sm col-lg p-0 link-button\"\r\n                      type=\"button\"\r\n                      // style={{\r\n                      //   background: \"none\",\r\n                      //   border: \"none\",\r\n                      //   margin: \"none\",\r\n                      //   textDecoration: \"underline\",\r\n                      //   color: \"dodgerblue\",\r\n                      // }}\r\n                      onClick={() =>\r\n                        setEditSettings({\r\n                          ...editSettings,\r\n                          editTriggered: true,\r\n                          editOtherTriggered: true,\r\n                        })\r\n                      }\r\n                    >\r\n                      update your details\r\n                    </button>\r\n                    <button\r\n                      className=\"col-md col-sm col-lg p-0 link-button\"\r\n                      type=\"button\"\r\n                      // style={{\r\n                      //   background: \"none\",\r\n                      //   border: \"none\",\r\n                      //   margin: \"none\",\r\n                      //   textDecoration: \"underline\",\r\n                      //   color: \"dodgerblue\",\r\n                      // }}\r\n                      onClick={() =>\r\n                        setEditSettings({\r\n                          ...editSettings,\r\n                          editTriggered: true,\r\n                          editEmailTriggered: true,\r\n                        })\r\n                      }\r\n                    >\r\n                      Change Email ID\r\n                    </button>\r\n                    <button\r\n                      className=\"col-md col-sm col-lg p-0 link-button\"\r\n                      type=\"button\"\r\n                      // style={{\r\n                      //   background: \"none\",\r\n                      //   border: \"none\",\r\n                      //   margin: \"none\",\r\n                      //   textDecoration: \"underline\",\r\n                      //   color: \"dodgerblue\",\r\n                      // }}\r\n                      onClick={() =>\r\n                        setEditSettings({\r\n                          ...editSettings,\r\n                          editTriggered: true,\r\n                          editPasswordTriggered: true,\r\n                        })\r\n                      }\r\n                    >\r\n                      Change Password\r\n                    </button>\r\n                  </div>\r\n                </Form.Group>\r\n              ) : (\r\n                <></>\r\n              )}\r\n            </Form>\r\n            {editSettings.editTriggered === true ||\r\n              editSettings.editEmailTriggered === true ||\r\n              (editSettings.editPasswordTriggered === true && (\r\n                <div className=\"col-md-8 mx-auto my-3 text-danger\">\r\n                  {state.postprocessingState.failureDetails.failureMessage}\r\n                  {state.postprocessingState.failureDetails.details}\r\n                </div>\r\n              ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default User\r\n\r\n","import { withRouter } from 'react-router-dom'\r\nconst ErrorPage = () => {\r\n    return <>\r\n       There was an error \r\n    </>\r\n}\r\n\r\nexport default withRouter(ErrorPage)","import cookie from \"react-cookies\";\r\nimport history from \"../../app-history\";\r\nimport moment from 'moment'\r\nimport {RestMethod} from '../../enums'\r\n\r\n\r\n\r\nexport const loadUserFeed = async (pageNo) => {\r\n\r\n    const jwtToken = cookie.load(\"jwt\");\r\n    const currentUser = cookie.load(\"current_user\");\r\n  const requestOptions = {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: `Bearer ${jwtToken}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    };\r\n    \r\n    try {\r\n\r\n        const response = await fetch(\r\n            `/api/v1/resource/posts/${pageNo}`,\r\n            requestOptions\r\n        );\r\n\r\n        const body = await response.json();\r\n        return body;\r\n    }\r\n    catch (err) {\r\n        console.log(err)\r\n        history.push('/error')\r\n    }\r\n\r\n};\r\n\r\nexport const postsCUD = async (\r\n  method,\r\n  postId,\r\n  postHeading,\r\n  postBody\r\n) => {\r\n  const jwtToken = cookie.load(\"jwt\");\r\n  const currentUser = cookie.load(\"current_user\");\r\n  let postForDispatch = {\r\n    postHeading: postHeading,\r\n    postBody: postBody,\r\n    owner: currentUser,\r\n  };\r\n\r\n  let requestOptions = {\r\n    method: method,\r\n    headers: {\r\n      Authorization: `Bearer ${jwtToken}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  let url = null;\r\n\r\n  switch (method) {\r\n    case RestMethod.POST:\r\n      {\r\n        requestOptions.body = JSON.stringify({ ...postForDispatch, postedAtTime: moment.utc().toISOString() });\r\n        url = `/api/v1/resource/post`;\r\n      }\r\n      break;\r\n    case RestMethod.PUT:\r\n      {\r\n        requestOptions.body = JSON.stringify({ ...postForDispatch, id: postId, modifiedAtTime: moment.utc().toISOString() });\r\n        url = `/api/v1/resource/post`;\r\n      }\r\n      break;\r\n    case RestMethod.DELETE: {\r\n      url = `/api/v1/resource/post/${postId}`;\r\n    }\r\n  }\r\n  try {\r\n    let response = await fetch(url, requestOptions);\r\n\r\n    let body = await response.json();\r\n\r\n    return body;\r\n  } catch (err) {\r\n    console.log(err);\r\n    history.push(\"/error\");\r\n  }\r\n};\r\n\r\nexport const likeUnlikeCUD = async (post, action) => {\r\n      const jwtToken = cookie.load(\"jwt\");\r\n      const currentUser = cookie.load(\"current_user\");\r\n  const likePost = {\r\n    owner: currentUser,\r\n    likedAtTime: moment.utc().toISOString(),\r\n    likedPost: { id: post.id },\r\n  };\r\n\r\n  const requestOptions = {\r\n    method: action === \"like\" ? \"POST\" : \"DELETE\",\r\n    headers: {\r\n      Authorization: `Bearer ${jwtToken}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ ...likePost }),\r\n    };\r\n    \r\n    try {\r\n        const response = await fetch(\r\n            `/api/v1/resource/post/${post.id}/${action}`,\r\n            requestOptions\r\n        )\r\n        const body = await response.json();\r\n        return body\r\n    }\r\n\r\n    catch (err) {\r\n        console.log(err)\r\n        history.push('/error')\r\n    }\r\n\r\n};\r\n","\r\nimport cookie from \"react-cookies\";\r\nimport history from \"../../app-history\";\r\nimport moment from 'moment';\r\nimport { RestMethod } from '../../enums'\r\n\r\n\r\n    \r\n\r\nexport const commentsCUD = async (method, commentId, postId, itemId, commentContent) => {\r\n\r\n  const jwtToken = cookie.load(\"jwt\");\r\n  const currentUser = cookie.load(\"current_user\");\r\n  let commentForDispatch = {\r\n    commentedOn: { id: postId },\r\n    commentContent: commentContent,\r\n    owner: currentUser,\r\n  };\r\n\r\n  if (commentId) {\r\n    commentForDispatch = { ...commentForDispatch, parentComment: { id: commentId } };\r\n  }\r\n\r\n  let requestOptions = {\r\n    method: method,\r\n    headers: {\r\n      Authorization: `Bearer ${jwtToken}`,\r\n      \"Content-Type\": \"application/json\",\r\n    }\r\n  };\r\n\r\n  let url = null;\r\n  \r\n  switch (method) {\r\n    case RestMethod.POST:\r\n      {\r\n\r\n        requestOptions.body = JSON.stringify({ ...commentForDispatch, commentedAtTime: moment.utc().toISOString() });\r\n        url = `/api/v1/resource/comment`;\r\n        \r\n      }\r\n      break;\r\n    case RestMethod.PUT:\r\n      {\r\n        commentForDispatch = { ...commentForDispatch, id: itemId, modifiedAtTime: moment.utc().toISOString() };\r\n        requestOptions.body = JSON.stringify({ ...commentForDispatch });\r\n        url = `/api/v1/resource/comment`;\r\n\r\n        \r\n      }\r\n      break;\r\n    case RestMethod.DELETE: {\r\n\r\n      url = `/api/v1/resource/comment/${itemId}`;\r\n\r\n    }\r\n  }\r\n  try {\r\n    let response = await fetch(\r\n      url,\r\n      requestOptions\r\n    );\r\n\r\n    let body = await response.json();\r\n\r\n    return body;\r\n  }\r\n  catch (err) {\r\n    console.log(err);\r\n    history.push('/error');\r\n  }\r\n};\r\n\r\nexport const loadComments = async (postId, commentId, pageNo) => {\r\n\r\n  const jwtToken = cookie.load(\"jwt\");\r\n  const currentUser = cookie.load(\"current_user\");\r\n    const requestOptions = {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: `Bearer ${jwtToken}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n  };\r\n  let url = null;\r\n  if(commentId)\r\n     url = `/api/v1/resource/comment/${commentId}/replies/${pageNo}`;\r\n  else\r\n      url = `/api/v1/resource/post/${postId}/comments/${pageNo}`;\r\n\r\n    try {\r\n      const response = await fetch(\r\n       url,\r\n        requestOptions\r\n      )\r\n      \r\n      const body = await response.json()\r\n      return body;\r\n    }\r\n    catch (err) {\r\n      history.push('/error')\r\n    }\r\n\r\n  \r\n};\r\n\r\nexport const likeUnlikeCommentCUD = async (comment, action) => {\r\n  const jwtToken = cookie.load(\"jwt\");\r\n  const currentUser = cookie.load(\"current_user\");\r\n  const likeComment = {\r\n    owner: currentUser,\r\n    likedAtTime: moment.utc().toISOString(),\r\n    likedComment: { id: comment.id },\r\n  };\r\n\r\n  const requestOptions = {\r\n    method: action === \"like\" ? \"POST\" : \"DELETE\",\r\n    headers: {\r\n      Authorization: `Bearer ${jwtToken}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ ...likeComment }),\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(\r\n      `/api/v1/resource/comment/${comment.id}/${action}`,\r\n      requestOptions\r\n    );\r\n    const body = await response.json();\r\n    return body;\r\n  } catch (err) {\r\n    console.log(err);\r\n    history.push(\"/error\");\r\n  }\r\n};\r\n","import { OverlayTrigger, Popover } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport function UserDetailsPopup(props) {\r\n  const { owner, dateString } = props;\r\n\r\n  return (\r\n    <OverlayTrigger\r\n      key=\"top\"\r\n      placement=\"top\"\r\n      //delay={{ show: 100, hide: 3000 }}\r\n      overlay={\r\n        <Popover id={\"popover-positioned-top\"}>\r\n          <Popover.Title as=\"h3\">{owner.name}</Popover.Title>\r\n          <Popover.Content>{owner.userSummary}</Popover.Content>\r\n        </Popover>\r\n      }\r\n    >\r\n      <div style={ {display: 'inline-block'}} >\r\n        <cite>\r\n          <Link className=\"text-secondary\" to={`/profile/${owner.id}`}>\r\n            {owner.name}\r\n          </Link>\r\n        </cite>\r\n      </div>\r\n    </OverlayTrigger>\r\n  );\r\n}\r\n","import cookie from \"react-cookies\";\r\nimport history from \"../../app-history\";\r\nimport { RestMethod } from \"../../enums\";\r\n\r\nexport const loadLikesOnPost = async (postId, pageNo) => {\r\n  const jwtToken = cookie.load(\"jwt\");\r\n  const currentUser = cookie.load(\"current_user\");\r\n  const requestOptions = {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: `Bearer ${jwtToken}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(\r\n      `/api/v1/resource/post/${postId}/likes`,\r\n      requestOptions\r\n    );\r\n\r\n    const body = await response.json();\r\n    return body;\r\n  } catch (err) {\r\n    console.log(err);\r\n    history.push(\"/error\");\r\n  }\r\n};\r\n\r\n\r\nexport const loadLikesOnComment = async (commentId, pageNo) => {\r\n  const jwtToken = cookie.load(\"jwt\");\r\n  const currentUser = cookie.load(\"current_user\");\r\n  const requestOptions = {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: `Bearer ${jwtToken}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(\r\n      `/api/v1/resource/comment/${commentId}/likes`,\r\n      requestOptions\r\n    );\r\n\r\n    const body = await response.json();\r\n    return body;\r\n  } catch (err) {\r\n    console.log(err);\r\n    history.push(\"/error\");\r\n  }\r\n};","import { Card, Modal, ListGroup, Button } from 'react-bootstrap';\r\nimport { UserDetailsPopup } from '../UserDetailsPopup';\r\nimport { useEffect, useState } from 'react';\r\nimport { loadLikesOnPost, loadLikesOnComment } from \"./like-service\";\r\nimport history from '../../app-history'\r\n\r\n\r\nexport const LikesModal = ({ itemId, itemType, setShow, show }) => {\r\n\r\n    const [likes, setLikes] = useState({ dataList: [], currentPageNo: 0, noOfPages: 0 })\r\n    \r\n    const handleClose = () => setShow(false);\r\n\r\n    useEffect(() => {\r\n    if(show === true)\r\n    {\r\n        (async () => {\r\n            try {\r\n            let body = null;\r\n                if (itemType === 'POST')\r\n                    body = await loadLikesOnPost(itemId, 0);\r\n                else\r\n                    body = await loadLikesOnComment(itemId, 0);\r\n            if ('error' in body) {\r\n                const { error } = body;\r\n                console.log(error);\r\n                history.push('/error');\r\n            }\r\n            else {\r\n                console.log(body)\r\n                setLikes(body);\r\n            }\r\n        }\r\n        catch (err) {\r\n            console.log(err);\r\n            history.push('/error')\r\n        }\r\n        })();\r\n    }\r\n\r\n}, [])\r\n\r\nreturn (\r\n    <>\r\n      <Modal\r\n        size=\"lg\"\r\n        show={show}\r\n        onHide={handleClose}\r\n        centered\r\n        >\r\n    \r\n        <Modal.Header closeButton>\r\n          <Modal.Title></Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className='p-0'>\r\n        <Card >\r\n        <ListGroup variant=\"flush\">\r\n        { likes.dataList.map((like)=>{\r\n            return <ListGroup.Item>\r\n              <div className=\"col-md\">\r\n                <UserDetailsPopup owner={like.owner} />\r\n            </div>\r\n            </ListGroup.Item>;\r\n        }) \r\n        }\r\n            \r\n        </ListGroup>\r\n        </Card>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};","import moment from 'moment';\r\n\r\nexport const convertDateToReadableFormat = (itemUTCString) => {\r\n  var itemUTC = moment.utc(itemUTCString);\r\n\r\n  var currentUTC = moment.utc();\r\n\r\n  let days = Math.abs(itemUTC.diff(currentUTC, \"days\"));\r\n  let months = Math.abs(itemUTC.diff(currentUTC, \"months\"));\r\n\r\n  if (days < 1) {\r\n    return itemUTC.from(currentUTC);\r\n  } else if (days >= 1 && days < 7) {\r\n    return moment(itemUTCString).local().format(\"dddd HH:mm A\");\r\n  } else if (months < 12) {\r\n    return moment(itemUTCString).local().format(\"dddd, MMM Do\");\r\n  }\r\n\r\n  return moment(itemUTCString).local().format(\"dddd, MMM Do YYYY\");\r\n};","import cookie from \"react-cookies\";\r\nimport history from \"../../app-history\";\r\nimport moment from 'moment';\r\nimport React, {  useState, useRef, useCallback } from \"react\";\r\n\r\nimport { commentsCUD, likeUnlikeCommentCUD, loadComments } from './comment-services'\r\n\r\nimport { Card, Button, Accordion, Form } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faThumbsUp, faReply } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faThumbsUp as faRegularThumbsUp, faCommentDots as faRegularCommentDots, faEdit, faWindowClose } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { RestMethod } from \"../../enums\";\r\nimport { UserDetailsPopup } from \"../UserDetailsPopup\";\r\nimport { LikesModal } from '../likes/LikesModal'\r\nimport { convertDateToReadableFormat } from '../utility/handle-dates';\r\n\r\n\r\nexport const Comment = React.memo(({ postId, parentCommentId, comment, setParentComments, setNoOfRepliesInParent}) => {\r\n  const currentUser = cookie.load(\"current_user\");\r\n\r\n\r\n  const [noOfLikes, setNoOfLikes] = useState(comment.noOfLikes);\r\n  const [noOfReplies, setNoOfReplies] = useState(comment.noOfReplies);\r\n  const [isCommentLiked, setIsCommentLiked] = useState(comment.commentLikedByCurrentUser)\r\n  const [replies, setReplies] = useState({})\r\n  const [replyContent, setReplyContent] = useState('')\r\n  const [showLikesModal, setShowLikesModal] = useState(false);\r\n  const [showGetRepliesLoad, setShowGetRepliesLoad] = useState(false);\r\n\r\n  let replyBarRef = useRef(null)\r\n  let reactionBarRef = useRef(null)\r\n  let updateCommentRef = useRef(null)\r\n  let commentContentRef = useRef(null)\r\n  let repliesDotRef = useRef(null)\r\n  let replyInputRef = useRef(null);\r\n  let updateInputRef = useRef(null);\r\n\r\n\r\n    const handleCommentCUD = useCallback(\r\n      async (e, method, commentObj) => {\r\n        let postId = commentObj.postId;\r\n        let itemId = commentObj.commentId;\r\n        let commentContent = commentObj.commentContent;\r\n\r\n        const postProp = `post${postId}`.trim();\r\n\r\n        e.preventDefault();\r\n\r\n        switch (method) {\r\n          case RestMethod.PUT:\r\n            if (commentContent === \"\") {\r\n              //raise error\r\n            } else {\r\n              const responseBody = await commentsCUD(\r\n                method,\r\n                null,\r\n                postId,\r\n                itemId,\r\n                commentContent\r\n              );\r\n              if (\"error\" in responseBody) {\r\n                const { error } = responseBody;\r\n                console.log(error);\r\n                history.push(\"/error\");\r\n              } else {\r\n                const { data } = responseBody;\r\n\r\n                //if (comments && comments[postProp]) {\r\n                  let newComment = {\r\n                    id: data.resourceId,\r\n                    commentedOn: { id: postId },\r\n                    commentContent: commentContent,\r\n                    owner: currentUser,\r\n                    commentLikedByCurrentUser: false,\r\n                    noOfLikes: 0,\r\n                    noOfReplies: 0,\r\n                  };\r\n\r\n                  // if (RestMethod.POST === method) {\r\n                  //   newComment = {\r\n                  //     ...newComment,\r\n                  //     commentedAtTime: moment.utc().toISOString(),\r\n                  //     modifiedAtTime: null,\r\n                  //   };\r\n                  // } else {\r\n                    newComment = {\r\n                      ...newComment,\r\n                      modifiedAtTime: moment.utc().toISOString(),\r\n                    };\r\n                  //}\r\n\r\n\r\n                setParentComments((comments) => {\r\n                  let newDataList =\r\n                    method === RestMethod.POST\r\n                      ? [...comments[postProp].dataList, newComment]\r\n                      : comments[postProp].dataList.map((comment) => {\r\n                        if (comment.id === itemId) return newComment;\r\n                        else return comment;\r\n                      });\r\n                  return {\r\n                    ...comments,\r\n                    [postProp]: {\r\n                      ...comments[postProp],\r\n                      dataList: newDataList,\r\n                    },\r\n                  };\r\n                });\r\n\r\n                 // setComments();\r\n                //}\r\n\r\n                // if (RestMethod.POST === method)\r\n                //   setNoOfComments(noOfComments + 1);\r\n              }\r\n            }\r\n\r\n            break;\r\n\r\n          case RestMethod.DELETE:\r\n            const responseBody = await commentsCUD(\r\n              method,\r\n              null,\r\n              postId,\r\n              itemId,\r\n              null\r\n            );\r\n            if (\"error\" in responseBody) {\r\n              const { error } = responseBody;\r\n              console.log(error);\r\n              history.push(\"/error\");\r\n            } else {\r\n\r\n              setParentComments((comments => {\r\n                return {\r\n                  ...comments,\r\n                  [postProp]: {\r\n                    ...comments[`post${postId}`],\r\n                    dataList: comments[`post${postId}`].dataList.filter(\r\n                      (comment) => comment.id !== itemId\r\n                    ),\r\n                  },\r\n                };\r\n              }));\r\n              //setComments();\r\n\r\n              setNoOfRepliesInParent(noOfComments => noOfComments - 1);\r\n            }\r\n           \r\n        }\r\n        setReplyContent(\"\");\r\n      },\r\n      []\r\n    );\r\n\r\n  const handleReplyCUD = useCallback(async (e, method, replyObj) => {\r\n    \r\n\r\n    let commentId = replyObj.parentCommentId;\r\n    let postId = replyObj.postId;\r\n    let itemId = replyObj.commentId\r\n    \r\n    let replyContent = replyObj.replyContent;\r\n\r\n    const commentProp = `comment${commentId}`.trim();\r\n    \r\n\r\n    e.preventDefault();\r\n\r\n      switch (method) {\r\n        case RestMethod.POST:\r\n        \r\n          {\r\n\r\n            if (\r\n              !replyContent ||\r\n              replyContent === undefined ||\r\n              replyContent === \"\"\r\n            ) {\r\n              //raise error\r\n            } else {\r\n              const responseBody = await commentsCUD(\r\n                method,\r\n                commentId,\r\n                postId,\r\n                itemId,\r\n                replyContent\r\n              );\r\n              if (\"error\" in responseBody) {\r\n                const { error } = responseBody;\r\n                console.log(error);\r\n                history.push(\"/error\");\r\n              } else {\r\n                const { data } = responseBody;\r\n\r\n   \r\n\r\n                if (replies && replies[commentProp]) {\r\n                  let newComment = {\r\n                    id: data.resourceId,\r\n                    commentedOn: { id: postId },\r\n                    parentComment: { id: commentId },\r\n                    commentedAtTime: moment.utc().toISOString(),\r\n                    commentContent: replyContent,\r\n                    owner: currentUser,\r\n                    commentLikedByCurrentUser: false,\r\n                    noOfLikes: 0,\r\n                    noOfReplies: 0,\r\n                  };\r\n\r\n                  let newDataList = [\r\n                    ...replies[commentProp].dataList,\r\n                    newComment,\r\n                  ];\r\n                  setReplies({\r\n                    ...replies,\r\n                    [commentProp]: {\r\n                      ...replies[commentProp],\r\n                      dataList: newDataList,\r\n                    },\r\n                  });\r\n                }\r\n\r\n                setNoOfReplies(noOfReplies + 1);\r\n\r\n                if (!replies || !replies[commentProp]) {\r\n                  repliesDotRef.current.click();\r\n                }\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        case RestMethod.PUT: {\r\n\r\n          if (replyContent === '' || replyContent === undefined || replyContent === null) {\r\n            alert('comment cant be empty');\r\n          }\r\n          else {\r\n                  const responseBody = await commentsCUD(\r\n                  method,\r\n                  commentId,\r\n                  postId,\r\n                  itemId,\r\n                  replyContent\r\n                );\r\n            if ('error' in responseBody) {\r\n              let { error } = responseBody;\r\n              console.log(error)\r\n              history.push('/error')\r\n            }\r\n            else {\r\n              setParentComments((comments) => {\r\n                return {\r\n                  ...comments,\r\n                  [commentProp]: {\r\n                    ...comments[commentProp],\r\n                    dataList: comments[commentProp].dataList.map((reply) => {\r\n                      if (reply.id === itemId) return {...reply, commentContent: replyContent, modifiedAtTime: moment.utc().toISOString()};\r\n                      else return reply;\r\n                    }),\r\n                  },\r\n                };\r\n              });\r\n            }\r\n          }\r\n        }\r\n          break;\r\n\r\n        case RestMethod.DELETE: {\r\n\r\n                const responseBody = await commentsCUD(\r\n                  method,\r\n                  commentId,\r\n                  postId,\r\n                  itemId,\r\n                  replyContent\r\n                );\r\n          if (\"error\" in responseBody) {\r\n            const { error } = responseBody;\r\n            console.log(error);\r\n            history.push(\"/error\");\r\n          } else {\r\n\r\n\r\n            setParentComments((comments) => {\r\n\r\n              return {\r\n                ...comments,\r\n                [commentProp]: {\r\n                  ...comments[`comment${commentId}`],\r\n                  dataList: comments[`comment${commentId}`].dataList.filter(\r\n                    (comment) => comment.id !== itemId\r\n                  ),\r\n                },\r\n              }\r\n            });\r\n\r\n            if(setNoOfRepliesInParent)\r\n              setNoOfRepliesInParent((noOfReplies) => noOfReplies - 1);\r\n          }\r\n         \r\n        }\r\n        \r\n    }\r\n    setReplyContent('');\r\n  }, [replies, noOfReplies]);\r\n\r\n\r\n    const handleLikeUnlikeComment = async (e, comment, action) => {\r\n      const responseBody = await likeUnlikeCommentCUD(comment, action);\r\n      if (\"error\" in responseBody) {\r\n        const { error } = responseBody;\r\n        console.log(error);\r\n        history.push(\"/error\");\r\n      } else {\r\n        const commentLikedByCurrentUser = action === \"like\" ? true : false;\r\n\r\n        setIsCommentLiked(commentLikedByCurrentUser)\r\n        setNoOfLikes((action === 'like') ? noOfLikes + 1 : noOfLikes - 1);\r\n        \r\n      }\r\n  };\r\n  \r\n    const handleGetReplies = useCallback(async (e, commentId, pageNo) => {\r\n      const commentProp = `comment${commentId}`.trim();\r\n\r\n      // if (\r\n      //   postId &&\r\n      //   (!replies[commentProp] ||\r\n      //     (replies[commentProp] &&\r\n      //       replies[commentProp].currentPageNo !== pageNo))\r\n      // ) {\r\n        \r\n      //   const responseBody = await loadComments(null, commentId, pageNo);\r\n      //   if (\"error\" in responseBody) {\r\n      //     const { error } = responseBody;\r\n      //     history.push(\"/error\");\r\n      //   } else {\r\n\r\n      //     setReplies({ ...replies, [commentProp]: responseBody });\r\n          \r\n      //   }\r\n      // }\r\n\r\n      if (postId) {\r\n        const responseBody = await loadComments(null, commentId, pageNo);\r\n        if (\"error\" in responseBody) {\r\n          const { error } = responseBody;\r\n          history.push(\"/error\");\r\n        } else {\r\n          if (!replies[commentProp]) {\r\n            setReplies({ ...replies, [commentProp]: responseBody });\r\n            \r\n          }\r\n          else if (replies[commentProp].currentPageNo != pageNo) {\r\n              setReplies({\r\n                ...replies,\r\n                [commentProp]: {\r\n                  currentPageNo: responseBody.currentPageNo,\r\n                  noOfPages: responseBody.noOfPages,\r\n                  dataList: [...replies[commentProp].dataList, ...responseBody.dataList]\r\n                }\r\n              });\r\n              \r\n            \r\n          }\r\n        }\r\n        setShowGetRepliesLoad(false);\r\n      }\r\n    \r\n  }, [replies, showGetRepliesLoad]);\r\n\r\n  const handleMovingPartsOnClick = (e, action) => {\r\n    switch (action) {\r\n      case \"REPLY\": \r\n        replyBarRef.current.style.display = 'block';\r\n        reactionBarRef.current.style.display = 'none';\r\n        replyInputRef.current.value = '';\r\n        replyInputRef.current.focus();\r\n      \r\n        break;\r\n      case \"REPLY_SUBMIT\": \r\n\r\n          replyBarRef.current.style.display = 'none';\r\n          reactionBarRef.current.style.display = 'inline-block';\r\n        \r\n      \r\n        break;\r\n      \r\n      case \"UPDATE\": \r\n        commentContentRef.current.style.display = 'none';\r\n        updateCommentRef.current.style.display = 'inline-block';\r\n        updateInputRef.current.focus();\r\n        reactionBarRef.current.style.display = 'none';\r\n\r\n      \r\n        break;\r\n      \r\n      case \"UPDATE_SUBMIT\": \r\n\r\n          commentContentRef.current.style.display = 'inline-block';\r\n          updateCommentRef.current.style.display = 'none';\r\n          reactionBarRef.current.style.display = 'inline-block';\r\n        \r\n      \r\n        \r\n    }\r\n  }\r\n\r\n  const handleMovingPartsForKeys = (e, action) => {\r\n    switch (action) {\r\n      case \"REPLY_SUBMIT\": {\r\n        if (e.key === \"Escape\") {\r\n          replyBarRef.current.style.display = \"none\";\r\n          reactionBarRef.current.style.display = \"inline-block\";\r\n        }\r\n      }\r\n        break;\r\n      \r\n      case \"UPDATE_SUBMIT\": {\r\n        if (e.key === \"Escape\") {\r\n          updateCommentRef.current.style.display = \"none\";\r\n          commentContentRef.current.style.display = \"inline-block\";\r\n          reactionBarRef.current.style.display = \"inline-block\";\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return <>\r\n     <div className={\"\" + (parentCommentId ? \"pl-4 \" : \"\") + \" \" + \"bg-light\"}>\r\n      <div className={\"\" + (parentCommentId ? \"p-0 m-0 border-left\" : \"\")}>\r\n        {\r\n          showLikesModal === true &&\r\n          <LikesModal\r\n          itemId={comment.id}\r\n          itemType=\"COMMENT\"\r\n          setShow={setShowLikesModal}\r\n          show={showLikesModal}\r\n          />\r\n        }\r\n        <Card\r\n          id={`commentCard${comment.id}`}\r\n          style={{ maxWidth: \"100%\", border: \"none\" }}\r\n          bg=\"light\"\r\n        >\r\n          <Card.Body>\r\n            <Card.Subtitle>\r\n              <div className=\"pb-4\">\r\n                <UserDetailsPopup owner={comment.owner} />\r\n                <div className=\"my-1\">\r\n                  <button className=\"link-button\">\r\n                    <small>\r\n                      {(!comment.modifiedAtTime ? \"Posted: \" : \"Modified: \") +\r\n                        `${convertDateToReadableFormat(\r\n                          !comment.modifiedAtTime\r\n                            ? comment.commentedAtTime\r\n                            : comment.modifiedAtTime\r\n                        )}`}\r\n                    </small>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </Card.Subtitle>\r\n            <Card.Text>\r\n              <div ref={commentContentRef} style={{ display: \"inline-block\" }}>\r\n                {comment.commentContent}\r\n              </div>\r\n              <div ref={updateCommentRef} style={{ display: \"none\" }}>\r\n                <Form.Group controlId={`updateCommentBoxFor${comment.id}`}>\r\n                  <Form.Control\r\n                    as=\"textarea\"\r\n                    rows={3}\r\n                    cols={100}\r\n                    id={`updateOn${comment.id}`}\r\n                    name={`updateOn${comment.id}`}\r\n                    onChange={(e) => setReplyContent(e.target.value)}\r\n                    ref={updateInputRef}\r\n                    value={replyContent}\r\n                    onKeyDown={(e) =>\r\n                      handleMovingPartsForKeys(e, \"UPDATE_SUBMIT\")\r\n                    }\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group controlId={`updateCommentBoxFor${comment.id}`}>\r\n                  <Button\r\n                    type=\"button\"\r\n                    id={`submitUpdateOn${comment.id}`}\r\n                    name={`submitUpdateOn${comment.id}`}\r\n                    onClick={(e) => {\r\n                      !parentCommentId\r\n                        ? handleCommentCUD(e, RestMethod.PUT, {\r\n                            postId: postId,\r\n                            commentId: comment.id,\r\n                            commentContent: replyContent,\r\n                          })\r\n                        : handleReplyCUD(e, RestMethod.PUT, {\r\n                            parentCommentId: parentCommentId,\r\n                            postId: postId,\r\n                            commentId: comment.id,\r\n                            replyContent: replyContent,\r\n                          });\r\n                      handleMovingPartsOnClick(e, \"UPDATE_SUBMIT\");\r\n                    }}\r\n                  >\r\n                    update\r\n                  </Button>\r\n                </Form.Group>\r\n              </div>\r\n            </Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n        <Accordion>\r\n          <Card style={{ maxWidth: \"100%\", border: \"none\" }}>\r\n            <Card.Header\r\n              style={{\r\n                // background: \"transparent\",\r\n                border: \"none\",\r\n                // margin: \"none\",\r\n                // textDecoration: \"underline\",\r\n                // color: \"dodgerblue\",\r\n              }}\r\n            >\r\n              <div\r\n                ref={reactionBarRef}\r\n                className=\"p-1\"\r\n                style={{ display: \"block\" }}\r\n              >\r\n                {noOfLikes > 0 && (\r\n                  <div className=\"mb-3\">\r\n                    <button\r\n                      className=\"link-button\"\r\n                      onClick={(e) => {\r\n                        setShowLikesModal(true);\r\n                      }}\r\n                    >\r\n                      <small>View likes</small>\r\n                    </button>\r\n                  </div>\r\n                )}\r\n                {isCommentLiked === undefined ||\r\n                isCommentLiked === null ||\r\n                isCommentLiked === false ? (\r\n                  <>\r\n                    <FontAwesomeIcon\r\n                      onClick={(e) =>\r\n                        comment.owner.id !== currentUser.id &&\r\n                        handleLikeUnlikeComment(e, comment, \"like\")\r\n                      }\r\n                      icon={faRegularThumbsUp}\r\n                      style={\r\n                        comment.owner.id !== currentUser.id\r\n                          ? {\r\n                              marginRight: \"0.5rem\",\r\n                              cursor: \"pointer\",\r\n                            }\r\n                          : {\r\n                              marginRight: \"0.5rem\",\r\n\r\n                              opacity: 0.4,\r\n                            }\r\n                      }\r\n                    ></FontAwesomeIcon>\r\n                    <span style={{ color: \"grey\", marginRight: \"1rem\" }}>\r\n                      {noOfLikes}\r\n                    </span>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <FontAwesomeIcon\r\n                      onClick={(e) =>\r\n                        handleLikeUnlikeComment(e, comment, \"unlike\")\r\n                      }\r\n                      icon={faThumbsUp}\r\n                      style={{\r\n                        marginRight: \"0.5rem\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                    ></FontAwesomeIcon>\r\n                    <span style={{ color: \"grey\", marginRight: \"1rem\" }}>\r\n                      {noOfLikes}\r\n                    </span>\r\n                  </>\r\n                )}\r\n                {noOfReplies > 0 ? (\r\n                  <>\r\n                    <Accordion.Toggle\r\n                      as={Button}\r\n                      variant=\"link\"\r\n                      eventKey={`comment${comment.id}`}\r\n                      onClick={(e) => {\r\n                        if (!replies[`comment${comment.id}`]) {\r\n                          setShowGetRepliesLoad(true);\r\n                          handleGetReplies(e, comment.id, 0);\r\n                        }\r\n                      }}\r\n                      ref={repliesDotRef}\r\n                      className=\"p-0 border-0\"\r\n                    >\r\n                      <FontAwesomeIcon\r\n                        icon={faRegularCommentDots}\r\n                        color=\"black\"\r\n                        style={{\r\n                          marginLeft: \"1rem\",\r\n                          marginRight: \"1rem\",\r\n                        }}\r\n                      ></FontAwesomeIcon>\r\n                    </Accordion.Toggle>\r\n                  </>\r\n                ) : (\r\n                  <></>\r\n                )}\r\n\r\n                <FontAwesomeIcon\r\n                  onClick={(e) => {\r\n                    handleMovingPartsOnClick(e, \"REPLY\");\r\n                  }}\r\n                  icon={faReply}\r\n                  style={{\r\n                    marginLeft: \"1rem\",\r\n                    marginRight: \"1rem\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                ></FontAwesomeIcon>\r\n                {comment.owner.id === currentUser.id && (\r\n                  <FontAwesomeIcon\r\n                    icon={faEdit}\r\n                    style={{\r\n                      marginLeft: \"1rem\",\r\n                      marginRight: \"1rem\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    onClick={(e) => {\r\n                      setReplyContent(comment.commentContent);\r\n                      handleMovingPartsOnClick(e, \"UPDATE\");\r\n                    }}\r\n                  ></FontAwesomeIcon>\r\n                )}\r\n                {comment.owner.id === currentUser.id && (\r\n                  <FontAwesomeIcon\r\n                    onClick={(e) => {\r\n                      !parentCommentId\r\n                        ? handleCommentCUD(e, RestMethod.DELETE, {\r\n                            postId: postId,\r\n                            commentId: comment.id,\r\n                          })\r\n                        : handleReplyCUD(e, RestMethod.DELETE, {\r\n                            parentCommentId: parentCommentId,\r\n                            postId: postId,\r\n                            commentId: comment.id,\r\n                          });\r\n                    }}\r\n                    icon={faWindowClose}\r\n                    style={{\r\n                      marginLeft: \"1rem\",\r\n                      marginRight: \"1rem\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                  ></FontAwesomeIcon>\r\n                )}\r\n              </div>\r\n              <div ref={replyBarRef} style={{ display: \"none\" }}>\r\n                <Form.Group controlId={`replyBoxFor${comment.id}`}>\r\n                  <Form.Control\r\n                    as=\"textarea\"\r\n                    rows={3}\r\n                    cols={100}\r\n                    id={`replyOn${comment.id}`}\r\n                    name={`replyOn${comment.id}`}\r\n                    ref={replyInputRef}\r\n                    onChange={(e) => setReplyContent(e.target.value)}\r\n                    onKeyDown={(e) =>\r\n                      handleMovingPartsForKeys(e, \"REPLY_SUBMIT\")\r\n                    }\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group controlId={`replyBoxFor${comment.id}`}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    id={`submitReplyOn${comment.id}`}\r\n                    name={`submitReplyOn${comment.id}`}\r\n                    onClick={(e) => {\r\n                      handleReplyCUD(e, RestMethod.POST, {\r\n                        parentCommentId: comment.id,\r\n                        postId: postId,\r\n                        commentId: null,\r\n                        replyContent: replyContent,\r\n                      });\r\n                      handleMovingPartsOnClick(e, \"REPLY_SUBMIT\");\r\n                    }}\r\n                  >\r\n                    reply\r\n                  </Button>\r\n                </Form.Group>\r\n              </div>\r\n            </Card.Header>\r\n\r\n            {noOfReplies > 0 ? (\r\n              <Accordion.Collapse eventKey={`comment${comment.id}`}>\r\n                <Card.Body className=\"p-0\">\r\n                  {showGetRepliesLoad === true && \r\n                  <div className='spinner bg-light'>\r\n                    <div className=\"bounce1\"></div>\r\n                    <div className=\"bounce2\"></div>\r\n                    <div className=\"bounce3\"></div>\r\n                </div>}\r\n                  {replies[`comment${comment.id}`.trim()] &&\r\n                    replies[`comment${comment.id}`].dataList.map(\r\n                      (reply, index2) => {\r\n                        return (\r\n                          <>\r\n                            <Comment\r\n                              key={`reply${reply.id}`}\r\n                              postId={postId}\r\n                              parentCommentId={comment.id}\r\n                              comment={reply}\r\n                              //handleCommentCUD={null}\r\n                              setParentComments={setReplies}\r\n                              setNoOfRepliesInParent={setNoOfReplies}\r\n                            />\r\n                          </>\r\n                        );\r\n                      }\r\n                    )}\r\n                  \r\n                  {replies[`comment${comment.id}`.trim()] &&\r\n                    replies[`comment${comment.id}`].currentPageNo <\r\n                      (replies[`comment${comment.id}`].noOfPages - 1) && (\r\n                      <button\r\n                        className=\"link-button\"\r\n                        onClick={(e) =>\r\n                          handleGetReplies(\r\n                            e,\r\n                            comment.id,\r\n                            replies[`comment${comment.id}`].currentPageNo + 1\r\n                          )\r\n                        }\r\n                      >\r\n                        load more replies\r\n                      </button>\r\n                    )}\r\n                </Card.Body>\r\n              </Accordion.Collapse>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </Card>\r\n        </Accordion>\r\n      </div>\r\n      {console.log(\"rendering comment \", comment.id)}\r\n    </div>\r\n    \r\n  </>;\r\n});\r\n","import { CKEditor } from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Button, Modal, InputGroup, FormControl } from \"react-bootstrap\";\r\nimport { postsCUD } from \"./post/post-service\";\r\nimport { RestMethod } from \"../enums\";\r\nimport cookie from \"react-cookies\";\r\nimport history from \"../app-history\";\r\nimport moment from 'moment';\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nexport const CreatePost = React.memo(({\r\n  setShow,\r\n    show,\r\n  method,\r\n  setPosts,\r\n    post\r\n}) => {\r\n  const [editorPost, setEditorPost] = useState({ id: null, postHeading: \"\", postBody: \"\" });\r\n  const jwtToken = cookie.load(\"jwt\");\r\n    const currentUser = cookie.load(\"current_user\");\r\n    \r\n    useEffect(() => {\r\n        if (post && show === true) {\r\n            setEditorPost({ id: post.id,  postHeading: post.postHeading, postBody: post.postBody });\r\n        }\r\n    }, [show])\r\n\r\n\r\n\r\n  const handleClose = (e) => setShow(false);\r\n\r\n    const handlePostCU = async (e, method, editorPost) => {\r\n        const postId = editorPost.id;\r\n        const postHeading = editorPost.postHeading.trim();\r\n      const postBody = editorPost.postBody.trim();\r\n      \r\n\r\n\r\n\r\n\r\n    if (postHeading === \"\" || postBody === \"\") {\r\n      //error\r\n    } else {\r\n    \r\n      const responseBody = await postsCUD(\r\n        method,\r\n        postId,\r\n        postHeading,\r\n        postBody\r\n      );\r\n\r\n      if (\"error\" in responseBody) {\r\n        const { error } = responseBody;\r\n\r\n          console.log(error);\r\n          handleClose(e);\r\n          history.push(\"/error\");\r\n          \r\n      } else {\r\n          const { data } = responseBody;\r\n          \r\n        switch (method) {\r\n          case RestMethod.POST: {\r\n            console.log('post getting executed');\r\n                setPosts((posts) => {\r\n                    return {\r\n                      ...posts,\r\n                      dataList: [\r\n                        {\r\n                          id: data.resourceId,\r\n                          owner: currentUser,\r\n                          postHeading: postHeading,\r\n                          postBody: postBody,\r\n                          postedAtTime: moment.utc().toISOString(),\r\n                          modifiedAtTime: null,\r\n                          noOfComments: 0,\r\n                          noOfLikes: 0,\r\n                        },\r\n                        ...posts.dataList,\r\n                      ],\r\n                    };\r\n                });\r\n            }\r\n            break;\r\n            case RestMethod.PUT: {\r\n                setPosts((posts) => {\r\n                return {\r\n                ...posts,\r\n                dataList: posts.dataList.map(listPost => {\r\n                  let newPost = listPost;\r\n                  if (listPost.id === postId) {\r\n                    if (postHeading !== '') {\r\n                      newPost = { ...newPost, postHeading: postHeading };\r\n                    }\r\n                    if (postBody !== '') {\r\n                      newPost = { ...newPost, postBody: postBody };\r\n                    }\r\n\r\n                    newPost = { ...newPost, modifiedAtTime: moment.utc().toISOString() }\r\n                    return newPost;\r\n                  }\r\n                  else {\r\n                    return listPost;\r\n                  }\r\n                })\r\n              }});\r\n            }\r\n        }\r\n\r\n\r\n      }\r\n    }\r\n    handleClose(e);\r\n    setEditorPost({ id: null, postHeading: '', postBody: '' });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        size=\"lg\"\r\n        show={show}\r\n        onHide={handleClose}\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title></Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"row\">\r\n            <div className='col-md-10 mx-auto'>\r\n              <InputGroup>\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text id=\"basic-addon1\">@</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl\r\n                  placeholder=\"PostHeading\"\r\n                  aria-label=\"PostHeading\"\r\n                  aria-describedby=\"basic-addon1\"\r\n                  onChange={(e) => setEditorPost({...editorPost, postHeading: e.target.value})}\r\n                  value={editorPost.postHeading}\r\n                />\r\n              </InputGroup>\r\n            </div>\r\n            <div className=\" mx-auto\">\r\n              <CKEditor\r\n                editor={ClassicEditor}\r\n                data={editorPost.postBody}\r\n                onReady={(editor) => {\r\n                  // You can store the \"editor\" and use when it is needed.\r\n                  if(post)\r\n                    editor.setData(post.postBody);\r\n                  \r\n                }}\r\n                onChange={(event, editor) => {\r\n                  const data = editor.getData();\r\n                  setEditorPost({ ...editorPost, postBody: data });\r\n                }}\r\n                onBlur={(event, editor) => {\r\n                  \r\n                }}\r\n                onFocus={(event, editor) => {\r\n                  \r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button\r\n            variant=\"primary\"\r\n            onClick={(e) => handlePostCU(e, method, editorPost)}\r\n          >\r\n            {method === RestMethod.PUT ? 'Update post': 'Create post'}\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n});\r\n","import cookie from \"react-cookies\";\r\nimport history from \"../../app-history\";\r\nimport React, {  useState, useRef, useCallback } from \"react\";\r\nimport { likeUnlikeCUD, postsCUD } from \"./post-service\";\r\nimport { loadComments, commentsCUD } from \"../comments/comment-services\";\r\nimport Parser from \"html-react-parser\";\r\nimport {\r\n  Card,\r\n  Button,\r\n  Accordion,\r\n  Form\r\n} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faThumbsUp, faReply } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faThumbsUp as faRegularThumbsUp, faEdit, faCommentDots, faWindowClose } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { RestMethod } from \"../../enums\";\r\nimport { UserDetailsPopup } from '../UserDetailsPopup'\r\nimport { Comment } from '../comments/Comment'\r\nimport { CreatePost } from \"../CreatePost\";\r\nimport { LikesModal } from \"../likes/LikesModal\";\r\nimport moment from 'moment';\r\nimport { convertDateToReadableFormat } from '../utility/handle-dates'\r\n\r\nlet myfuncs2 = new Set();\r\n\r\nexport const Post = React.memo(({ post, setPosts }) => {\r\n  const currentUser = cookie.load(\"current_user\");\r\n\r\n  const [comments, setComments] = useState({});\r\n\r\n  const [showPostModal, setShowPostModal] = useState(false)\r\n\r\n  const [commentContent, setCommentContent] = useState(\"\");\r\n\r\n  let [noOfComments, setNoOfComments] = useState(post.noOfComments);\r\n\r\n  let [showLikesModal, setShowLikesModal] = useState(false)\r\n\r\n  const replyBarRef = useRef(null);\r\n  let reactionBarRef = useRef(null);\r\n  const replyInputRef = useRef(null);\r\n  const commentsDotRef = useRef(null);\r\n\r\n\r\n  const handlePostDelete = async (e, postId) => {\r\n    e.preventDefault();\r\n    const responseBody = await postsCUD(\r\n      RestMethod.DELETE,\r\n      postId,\r\n      null,\r\n      null\r\n    );\r\n    if (\"error\" in responseBody) {\r\n      const { error } = responseBody;\r\n      console.log(error);\r\n      history.push(\"/error\");\r\n    } else {\r\n\r\n      setPosts((posts) => {\r\n        return {\r\n          ...posts,\r\n          dataList: posts.dataList.filter(iterPost => iterPost.id !== postId)\r\n        };\r\n      });\r\n    }   \r\n  }\r\n\r\n  const handleCommentCUD = useCallback( async (e, method, commentObj) => {\r\n\r\n    let postId = commentObj.postId;\r\n    let itemId = commentObj.commentId;\r\n    let commentContent = commentObj.commentContent;\r\n\r\n    const postProp = `post${postId}`.trim();\r\n\r\n    e.preventDefault();\r\n\r\n    switch (method) {\r\n      case RestMethod.POST:\r\n      case RestMethod.PUT:\r\n        \r\n           \r\n          \r\n          if (commentContent === '') {\r\n            //raise error\r\n          } else {\r\n                const responseBody = await commentsCUD(\r\n                  method,\r\n                  null,\r\n                  postId,\r\n                  itemId,\r\n                  commentContent\r\n                );\r\n            if (\"error\" in responseBody) {\r\n              const { error } = responseBody;\r\n              console.log(error);\r\n              history.push(\"/error\");\r\n            } else {\r\n\r\n              const { data } = responseBody\r\n\r\n                if (comments && comments[postProp]){\r\n                \r\n                  let newComment = {\r\n                    id: data.resourceId,\r\n                    commentedOn: { id: postId },\r\n                    commentContent: commentContent,\r\n                    owner: currentUser,\r\n                    commentLikedByCurrentUser: false,\r\n                    noOfLikes: 0,\r\n                    noOfReplies: 0,\r\n                  };\r\n\r\n                  if (RestMethod.POST === method) {\r\n                    newComment = { ...newComment, commentedAtTime: moment.utc().toISOString(), modifiedAtTime: null };\r\n                  }\r\n                  else {\r\n                    newComment = { ...newComment, modifiedAtTime: moment.utc().toISOString() };\r\n                  }\r\n\r\n                let newDataList = (method === RestMethod.POST) ?\r\n                  [...comments[postProp].dataList, newComment]\r\n                  : comments[postProp].dataList.map((comment) => {\r\n                    if (comment.id === itemId)\r\n                      return newComment\r\n                    else return comment\r\n                  });\r\n                \r\n                setComments({\r\n                  ...comments, [postProp]: {\r\n                    ...comments[postProp],\r\n                    dataList: newDataList\r\n                  }\r\n                });\r\n              }\r\n             \r\n              \r\n              if(RestMethod.POST === method)\r\n                setNoOfComments(noOfComments + 1)\r\n\r\n            }\r\n        }\r\n        \r\n        break;\r\n\r\n      case RestMethod.DELETE: \r\n            const responseBody = await commentsCUD(\r\n              method,\r\n              null,\r\n              postId,\r\n              itemId,\r\n              null\r\n            );\r\n        if (\"error\" in responseBody) {\r\n          const { error } = responseBody;\r\n          console.log(error);\r\n          history.push(\"/error\");\r\n        } else {\r\n\r\n            setComments({\r\n              ...comments,\r\n              [postProp]: {\r\n                ...comments[`post${postId}`],\r\n                dataList: comments[`post${postId}`].dataList.filter(\r\n                  (comment) => comment.id !== itemId\r\n                ),\r\n              },\r\n            });\r\n\r\n          \r\n          setNoOfComments(noOfComments - 1);\r\n          \r\n        }\r\n        myfuncs2.add(setComments);\r\n      \r\n    }\r\n    setCommentContent('')\r\n  }, [comments, noOfComments]);\r\n\r\n  \r\n\r\n  const handleGetComments = useCallback( async (e, postId, pageNo) => {\r\n    const postProp = `post${postId}`.trim();\r\n\r\n\r\n    // if (\r\n    //   postId &&\r\n    //     (!comments[postProp] ||\r\n    //       (comments[postProp] && comments[postProp].currentPageNo !== pageNo))) {\r\n    //   const responseBody = await loadComments(\r\n    //     postId,\r\n    //     null,\r\n    //     pageNo\r\n    //   );\r\n    //   if (\"error\" in responseBody) {\r\n    //     const { error } = responseBody;\r\n    //     history.push(\"/error\");\r\n    //   } else {\r\n\r\n    //     setComments({ ...comments, [postProp]: responseBody });\r\n\r\n    //   }\r\n    // }\r\n\r\n    if (postId) {\r\n      const responseBody = await loadComments( postId, null, pageNo);\r\n      if (\"error\" in responseBody) {\r\n        const { error } = responseBody;\r\n        history.push(\"/error\");\r\n      } else {\r\n        if (!comments[postProp]) {\r\n          setComments({ ...comments, [postProp]: responseBody });\r\n        } else if(comments[postProp].currentPageNo !== pageNo){\r\n          setComments({\r\n            ...comments,\r\n            [postProp]: {\r\n              currentPageNo: responseBody.currentPageNo,\r\n              noOfPages: responseBody.noOfPages,\r\n              dataList: [\r\n                ...comments[postProp].dataList,\r\n                ...responseBody.dataList,\r\n              ],\r\n            },\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }, [comments]);\r\n\r\n  const handleLikeUnlikePost = async (e, post, action) => {\r\n    const responseBody = await likeUnlikeCUD(post, action);\r\n    if (\"error\" in responseBody) {\r\n      const { error } = responseBody;\r\n      console.log(error);\r\n      history.push(\"/error\");\r\n    } else {\r\n      const postLikedByCurrentUser = action === \"like\" ? true : false;\r\n\r\n      setPosts((posts) => {\r\n        let dataList = posts.dataList.map((iterPost) => {\r\n          if (iterPost.id === post.id) {\r\n            const noOfLikes = (action === 'like') ? iterPost.noOfLikes + 1 : iterPost.noOfLikes - 1;\r\n            return { ...iterPost, postLikedByCurrentUser, noOfLikes };\r\n          } else {\r\n            return iterPost;\r\n          }\r\n        });\r\n\r\n        return { ...posts, dataList: dataList };\r\n      });\r\n    }\r\n  };\r\n\r\n    const handleMovingPartsOnClick = (e, action) => {\r\n      switch (action) {\r\n        case \"REPLY\":\r\n          {\r\n            replyBarRef.current.style.display = \"block\";\r\n            reactionBarRef.current.style.display = \"none\";\r\n            replyInputRef.current.value = \"\";\r\n            replyInputRef.current.focus();\r\n          }\r\n          break;\r\n        case \"REPLY_SUBMIT\":\r\n          {\r\n \r\n              replyBarRef.current.style.display = \"none\";\r\n              reactionBarRef.current.style.display = \"inline-block\";\r\n            \r\n          }\r\n          break;\r\n      }\r\n  };\r\n  \r\n  const handleMovingPartsForKeys = (e) => {\r\n    if (e.key === 'Escape') {\r\n            replyBarRef.current.style.display = \"none\";\r\n            reactionBarRef.current.style.display = \"inline-block\";\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      {\r\n        showPostModal === true && (\r\n        <CreatePost\r\n          setShow={setShowPostModal}\r\n          show={showPostModal}\r\n          method={RestMethod.PUT}\r\n          setPosts={setPosts}\r\n          post={post}\r\n        />\r\n        )\r\n      }\r\n\r\n      {\r\n        showLikesModal === true && <LikesModal\r\n        itemId={post.id}\r\n        itemType=\"POST\"\r\n        setShow={setShowLikesModal}\r\n        show={showLikesModal}\r\n        />\r\n      }\r\n      <Card className=\"mt-2\" style={{ maxWidth: \"80%\", borderBottom: \"none\" }}>\r\n        {/* <Card.Img variant=\"top\" src=\"holder.js/100px180\" /> */}\r\n\r\n        <Card.Body>\r\n          <Card.Title className=\"border-bottom pb-3\">\r\n            {post.postHeading}\r\n          </Card.Title>\r\n          <Card.Subtitle>\r\n            <div className=\"pb-4\">\r\n              <UserDetailsPopup owner={post.owner} />\r\n              <div className=\"my-1\">\r\n                <button className=\"link-button\">\r\n                  <small>\r\n                    {(!post.modifiedAtTime ? \"Posted: \" : \"Modified: \") +\r\n                      `${convertDateToReadableFormat(\r\n                        !post.modifiedAtTime\r\n                          ? post.postedAtTime\r\n                          : post.modifiedAtTime\r\n                      )}`}\r\n                  </small>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </Card.Subtitle>\r\n          <Card.Text>\r\n            <div style={{ display: \"inline-block\" }}>\r\n              {Parser(post.postBody)}\r\n            </div>\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n\r\n      <Accordion>\r\n        <Card style={{ maxWidth: \"80%\", borderTop: \"none\" }}>\r\n          <Card.Header\r\n            style={{\r\n              background: \"none\",\r\n              border: \"none\",\r\n              margin: \"none\",\r\n              // textDecoration: \"underline\",\r\n              // color: \"dodgerblue\",\r\n            }}\r\n          >\r\n            <div ref={reactionBarRef} style={{ display: \"inline-block\" }}>\r\n              <div className=\"mb-3\">\r\n                {post.noOfLikes > 0 && (\r\n                  <button\r\n                    className=\"link-button mr-3\"\r\n                    onClick={(e) => {\r\n                      setShowLikesModal(true);\r\n                    }}\r\n                  >\r\n                    <small>View Likes</small>\r\n                  </button>\r\n                )}\r\n              </div>\r\n              {post.postLikedByCurrentUser === false ||\r\n              post.postLikedByCurrentUser === undefined ||\r\n              post.postLikedByCurrentUser === null ? (\r\n                <>\r\n                  <FontAwesomeIcon\r\n                    color=\"#4A4A4A\"\r\n                    onClick={(e) =>\r\n                      post.owner.id !== currentUser.id &&\r\n                      handleLikeUnlikePost(e, post, \"like\")\r\n                    }\r\n                    icon={faRegularThumbsUp}\r\n                    style={\r\n                      post.owner.id !== currentUser.id\r\n                        ? {\r\n                            marginRight: \"0.5rem\",\r\n                            cursor: \"pointer\",\r\n                          }\r\n                        : {\r\n                            marginRight: \"0.5rem\",\r\n\r\n                            opacity: 0.4,\r\n                          }\r\n                    }\r\n                  ></FontAwesomeIcon>\r\n                  <span style={{ color: \"#4A4A4A\", marginRight: \"1rem\" }}>\r\n                    {post.noOfLikes}\r\n                  </span>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <FontAwesomeIcon\r\n                    color=\"#4A4A4A\"\r\n                    onClick={(e) => handleLikeUnlikePost(e, post, \"unlike\")}\r\n                    icon={faThumbsUp}\r\n                    style={{\r\n                      marginRight: \"0.5rem\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                  ></FontAwesomeIcon>\r\n                  <span style={{ color: \"grey\" }}>{post.noOfLikes}</span>\r\n                </>\r\n              )}\r\n              {noOfComments > 0 && (\r\n                <>\r\n                  <Accordion.Toggle\r\n                    as={Button}\r\n                    variant=\"link\"\r\n                    eventKey={`post${post.id}`}\r\n                    onClick={(e) => handleGetComments(e, post.id, 0)}\r\n                    ref={commentsDotRef}\r\n                    className=\"p-0 border-0\"\r\n                  >\r\n                    <FontAwesomeIcon\r\n                      icon={faCommentDots}\r\n                      color=\"#4A4A4A\"\r\n                      style={{\r\n                        marginLeft: \"1rem\",\r\n                        marginRight: \"1rem\",\r\n                      }}\r\n                    ></FontAwesomeIcon>\r\n                  </Accordion.Toggle>\r\n                </>\r\n              )}\r\n              <FontAwesomeIcon\r\n                onClick={(e) => {\r\n                  handleMovingPartsOnClick(e, \"REPLY\");\r\n                }}\r\n                color=\"#4A4A4A\"\r\n                icon={faReply}\r\n                style={{\r\n                  marginLeft: \"1rem\",\r\n                  marginRight: \"1rem\",\r\n                  cursor: \"pointer\",\r\n                }}\r\n              ></FontAwesomeIcon>\r\n\r\n              {post.owner.id === currentUser.id && (\r\n                <FontAwesomeIcon\r\n                  icon={faEdit}\r\n                  color=\"#4A4A4A\"\r\n                  style={{\r\n                    marginLeft: \"1rem\",\r\n                    marginRight: \"1rem\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                  onClick={(e) => {\r\n                    setShowPostModal(true);\r\n                  }}\r\n                ></FontAwesomeIcon>\r\n              )}\r\n              {post.owner.id === currentUser.id && (\r\n                <FontAwesomeIcon\r\n                  onClick={(e) => {\r\n                    handlePostDelete(e, post.id);\r\n                  }}\r\n                  color=\"#4A4A4A\"\r\n                  icon={faWindowClose}\r\n                  style={{\r\n                    marginLeft: \"1rem\",\r\n                    marginRight: \"1rem\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                ></FontAwesomeIcon>\r\n              )}\r\n            </div>\r\n            <div ref={replyBarRef} style={{ display: \"none\" }}>\r\n              <Form.Group controlId={`commentBoxFor${post.id}`}>\r\n                <Form.Control\r\n                  as=\"textarea\"\r\n                  rows={3}\r\n                  cols={90}\r\n                  id={`commentOn${post.id}`}\r\n                  name={`commentOn${post.id}`}\r\n                  onChange={(e) => setCommentContent(e.target.value)}\r\n                  ref={replyInputRef}\r\n                  onKeyDown={(e) => {\r\n                    handleMovingPartsForKeys(e);\r\n                  }}\r\n                />\r\n              </Form.Group>\r\n              <Form.Group controlId={`replyBoxFor${post.id}`}>\r\n                <Button\r\n                  type=\"submit\"\r\n                  id={`submitCommentOn${post.id}`}\r\n                  name={`submitCommentOn${post.id}`}\r\n                  onClick={(e) => {\r\n                    handleCommentCUD(e, RestMethod.POST, {\r\n                      commentId: null,\r\n                      postId: post.id,\r\n                      commentContent: commentContent,\r\n                    });\r\n                    handleMovingPartsOnClick(e, \"REPLY_SUBMIT\");\r\n                  }}\r\n                >\r\n                  reply\r\n                </Button>\r\n              </Form.Group>\r\n            </div>\r\n          </Card.Header>\r\n\r\n          {noOfComments > 0 && (\r\n            <Accordion.Collapse eventKey={`post${post.id}`}>\r\n              <Card.Body>\r\n                {comments[`post${post.id}`.trim()] &&\r\n                  comments[`post${post.id}`].dataList.map((comment, index2) => {\r\n                    return (\r\n                      <Comment\r\n                        key={`comment${comment.id}`}\r\n                        postId={post.id}\r\n                        parentCommentId={null}\r\n                        comment={comment}\r\n                        //handleCommentCUD={handleCommentCUD}\r\n                        setParentComments={setComments}\r\n                        setNoOfRepliesInParent={setNoOfComments}\r\n                      />\r\n                    );\r\n                  })}\r\n                {comments[`post${post.id}`.trim()] &&\r\n                  comments[`post${post.id}`].currentPageNo <\r\n                    comments[`post${post.id}`].noOfPages - 1 && (\r\n                    <button\r\n                      className=\"link-button\"\r\n                      onClick={(e) =>\r\n                        handleGetComments(\r\n                          e,\r\n                          post.id,\r\n                          comments[`post${post.id}`].currentPageNo + 1\r\n                        )\r\n                      }\r\n                    >\r\n                      load more comments\r\n                    </button>\r\n                  )}\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          )}\r\n        </Card>\r\n      </Accordion>\r\n      {/* {console.log('no of commentcud functions for post ', post.id, ' is ', myfuncs2.size)} */}\r\n    </div>\r\n  );\r\n});\r\n","import { useState, useEffect } from 'react'\r\nimport { Alert } from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faWindowClose } from \"@fortawesome/free-regular-svg-icons\";\r\nimport history from '../app-history'\r\n\r\nexport const ErrorAlert = ({alertMessage}) => {\r\nconst [show, setShow] = useState(true);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setShow(false);\r\n\r\n    }, 3000)\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <Alert style={{  zIndex: '5000' }} show={show} variant=\"success\" dismissible>\r\n\r\n        <p>{alertMessage}</p>\r\n\r\n      </Alert>\r\n    </>\r\n  );\r\n}\r\n","import React, { useEffect, useState, useRef } from 'react'\r\n\r\nimport cookie from 'react-cookies'\r\nimport history from '../../app-history'\r\nimport { loadUserFeed } from '../post/post-service'\r\nimport { Post } from '../post/Post'\r\nimport { CreatePost } from '../CreatePost';\r\nimport { RestMethod } from '../../enums'\r\nimport { ErrorAlert } from '../ErrorAlert'\r\n\r\n\r\nconst UserFeed = React.memo(({ setAddPostButtonClicked, addPostButtonClicked }) => {\r\n\r\n\r\n  let location = history.location;\r\n  let showAlert = false;\r\n  let alertMessage = null;\r\n  if (location && location.state) {\r\n    showAlert = location.state.showAlert;\r\n    alertMessage = location.state.alertMessage;\r\n  }\r\n\r\n  const pagePostsRef = useRef();\r\n  \r\n\r\n  const [pagePosts, setPosts] = useState({\r\n    currentPageNo: -1,\r\n    noOfPages: -1,\r\n    dataList: [],\r\n  });\r\n\r\n  pagePostsRef.current = pagePosts;\r\n\r\n  const changeHistory = () => {\r\n    history.replace({ state: null });\r\n  };\r\n\r\n  useEffect(() => {\r\n    \r\n    window.onbeforeunload = function () {\r\n      if (showAlert === true) changeHistory();\r\n      //window.scrollTo(0, 0);\r\n      document.body.style.display = 'none';\r\n    };\r\n  \r\n    if (pagePostsRef.current.currentPageNo === -1) {\r\n\r\n      (async () => {\r\n        try {\r\n          const body = await loadUserFeed(0);\r\n          if (\"error\" in body) {\r\n            console.log(body.error);\r\n            history.push(\"/error\");\r\n          } else {\r\n            setPosts(body);\r\n            window.addEventListener(\"scroll\", (e) => handleScroll(e));\r\n          };\r\n\r\n        } catch (err) {\r\n          console.log(err);\r\n          history.push(\"/error\"); \r\n        }\r\n      })();\r\n    }\r\n    \r\n\r\n      return () => {\r\n        if (showAlert === true) {\r\n          window.onbeforeunload = null;\r\n          \r\n        }\r\n        window.removeEventListener(\"scroll\", e => handleScroll(e));\r\n      };\r\n    \r\n  }, []);\r\n\r\n  function getDocHeight() {\r\n    var D = document;\r\n    return Math.max(\r\n      D.body.scrollHeight,\r\n      D.documentElement.scrollHeight,\r\n      D.body.offsetHeight,\r\n      D.documentElement.offsetHeight,\r\n      D.body.clientHeight,\r\n      D.documentElement.clientHeight\r\n    );\r\n  }\r\n\r\n  const handleScroll = async (e) => {\r\n    \r\n    if ((window.scrollY + window.innerHeight) === getDocHeight()) {\r\n      try {\r\n        if (pagePostsRef.current.currentPageNo < pagePostsRef.current.noOfPages ) {\r\n          const body = await loadUserFeed(pagePostsRef.current.currentPageNo + 1);\r\n          if (\"error\" in body) {\r\n            console.log(body.error);\r\n            history.push(\"/error\");\r\n          } else {\r\n            const { dataList, currentPageNo, noOfPages } = body;\r\n            setPosts({ ...pagePostsRef.current, dataList: [...pagePostsRef.current.dataList, ...dataList], currentPageNo: currentPageNo, noOfPages: noOfPages});\r\n           \r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n        history.push(\"/error\");\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n\r\n      {showAlert === true && <ErrorAlert alertMessage={alertMessage} />}\r\n      {addPostButtonClicked === true && <CreatePost setShow={ setAddPostButtonClicked} show={addPostButtonClicked} method={RestMethod.POST} setPosts={setPosts} post={null}  />}\r\n      <div className=\"col-md-8 my-3 mx-auto\">\r\n        {pagePosts.dataList && pagePosts.dataList.length > 0 ? (\r\n          pagePosts.dataList.map((post, index) => {\r\n            return (\r\n              <Post key={`post${post.id}`} post={post} setPosts={setPosts} />\r\n            );\r\n          })\r\n        ) : (\r\n          pagePosts.currentPageNo === -1 && <>loading</> \r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default UserFeed","import { Navbar, Nav, Form, FormControl, Button, NavDropdown , DropdownButton, Dropdown} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n faSignOutAlt\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport cookie from \"react-cookies\";\r\nimport history from '../../app-history'\r\nimport React, { useState, useEffect, useContext } from 'react'\r\nimport { CurrentUserContext } from '../../App'\r\n\r\n\r\nconst NavBar = React.memo(({ setAddPostButtonClicked }) => {\r\n\r\n\r\n  const { isCurrentUserUpdated, setIsCurrentUserUpdated } = useContext(\r\n    CurrentUserContext\r\n  );\r\n\r\n  const loggedInUser = cookie.load('current_user');\r\n\r\n  const logout = (e) => {\r\n\r\n    cookie.remove('jwt', { path: '/' })\r\n    cookie.remove('current_user', { path: '/' })\r\n    setTimeout(() => history.push(\"/login\"), 800);\r\n    \r\n    \r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      {\r\n        <Navbar style={{ position: \"sticky\" }} bg=\"light\" fixed='top' expand=\"lg\">\r\n          <Navbar.Brand href=\"/\">Citizen Sane</Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"ml-auto\">\r\n              {/* <Nav.Link href=\"/\">Home</Nav.Link> */}\r\n              <Form className=\"my-auto\" inline>\r\n                <FormControl\r\n                  type=\"text\"\r\n                  placeholder=\"Search\"\r\n                  className=\"mr-sm-2\"\r\n                />\r\n                <Button variant='light' >Search</Button>\r\n              </Form>\r\n              <div >\r\n                <Button variant=\"light\" onClick={(e) => { setAddPostButtonClicked(true) }}>\r\n                  Add a post\r\n                  </Button>\r\n              </div>\r\n\r\n\r\n           \r\n\r\n              <DropdownButton\r\n                variant=\"light\"\r\n                className=\"my-auto mr-4\"\r\n                menuAlign=\"right\"\r\n                title={loggedInUser.profileName}\r\n              >\r\n                <Dropdown.Item href={`/profile/${loggedInUser.id}`}>\r\n                  <div>{loggedInUser.name}</div>\r\n                  <div>\r\n                    <small>View your profile information</small>\r\n                  </div>\r\n                </Dropdown.Item>\r\n                <Dropdown.Divider />\r\n                <Dropdown.Item href=\"#\" >\r\n                  Give feedback\r\n                  </Dropdown.Item>\r\n                <Dropdown.Item href=\"#\" onClick={(e) => logout(e)}>\r\n                  Logout\r\n                  </Dropdown.Item>\r\n              </DropdownButton>\r\n\r\n\r\n            </Nav>\r\n\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n      }\r\n    </>\r\n  );\r\n    \r\n});\r\n\r\nexport default NavBar","\r\nimport User from \"./user/User\";\r\nimport ErrorPage from \"./error/ErrorPage\";\r\nimport UserFeed from \"./userfeed/UserFeed\";\r\nimport NavBar from './navigation/NavBar'\r\nimport history from '../app-history'\r\nimport { useState } from 'react';\r\n\r\nimport { Router, Route, Switch } from \"react-router\";\r\n\r\n\r\nconst AppIndex = () => {\r\n\r\n  const [addPostButtonClicked, setAddPostButtonClicked] = useState(false);\r\n  return (\r\n    <>\r\n      <Router history={history}>\r\n        <NavBar setAddPostButtonClicked={ setAddPostButtonClicked } />\r\n        <Switch>\r\n          <Route exact path=\"/profile/:id\" component={User} />\r\n          <Route exact path=\"/error\" component={ErrorPage} />\r\n          <Route exact path=\"/\" render={() => <UserFeed setAddPostButtonClicked={ setAddPostButtonClicked } addPostButtonClicked={addPostButtonClicked} />}/>\r\n        </Switch>\r\n      </Router>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppIndex;\r\n","import './App.css';\r\nimport  UserRegister  from './components/user/UserRegister'\r\nimport Login from './components/login/Login'\r\nimport history from './app-history'\r\nimport 'react-app-polyfill/stable';\r\n\r\nimport {\r\n  Router,\r\n  Route,\r\n  Switch\r\n} from \"react-router\";\r\nimport { Redirect } from 'react-router'\r\nimport Cookies from \"universal-cookie\";\r\nimport AppIndex from './components/AppIndex';\r\nimport React, { useState } from 'react';\r\n\r\nfunction userExists() {\r\n    const cookies = new Cookies();\r\n    if (cookies.get('current_user'))\r\n        return true\r\n    return false\r\n}\r\n\r\nexport const CurrentUserContext = React.createContext();\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n  const [isCurrentUserUpdated, setIsCurrentUserUpdated] = useState(false);\r\n  const value = { isCurrentUserUpdated, setIsCurrentUserUpdated };\r\n\r\n  \r\n\r\n  return (\r\n    <div>\r\n    <Router history={history}>\r\n      <Switch>\r\n        <Route exact path=\"/login\"  render={() => userExists()? <Redirect to={{pathname: '/', state: {showAlert: true, alertMessage: 'You are logged in'}}} />: <Login/>} />\r\n        <Route exact path=\"/register\" render={() => userExists()? <Redirect to={{pathname: '/', state: {showAlert: true, alertMessage: 'You are logged in'}}} />: <UserRegister/>}  />\r\n        <Route exact path='*' render={() => !userExists() ? <Redirect to={{ pathname: '/login' }} /> : <CurrentUserContext.Provider value={ value }><AppIndex/></CurrentUserContext.Provider>}/>\r\n    \r\n      </Switch>\r\n      </Router>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n   <React.StrictMode>\r\n    <App />,\r\n   </React.StrictMode>, \r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n"],"sourceRoot":""}